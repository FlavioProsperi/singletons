GradingClient/Database.hs:0:0: Splicing declarations
    singletons
      [d| data Nat
            = Zero | Succ Nat
            deriving (Eq, Ord) |]
  ======>
    GradingClient/Database.hs:(0,0)-(0,0)
    data Nat
      = Zero | Succ Nat
      deriving (Eq, Ord)
    type family Equals_0123456789 (a :: Nat) (b :: Nat) :: Bool where
      Equals_0123456789 Zero Zero = TrueSym0
      Equals_0123456789 (Succ a) (Succ b) = (==) a b
      Equals_0123456789 (a :: Nat) (b :: Nat) = FalseSym0
    type instance (==) (a :: Nat) (b :: Nat) = Equals_0123456789 a b
    type ZeroSym0 = Zero
    data SuccSym0 (k :: TyFun Nat Nat)
    type instance Apply SuccSym0 a = Succ a
    data instance Sing (z :: Nat)
      = z ~ Zero => SZero |
        forall (n :: Nat). z ~ Succ n => SSucc (Sing n)
    type SNat (z :: Nat) = Sing z
    instance SingKind (KProxy :: KProxy Nat) where
      type DemoteRep (KProxy :: KProxy Nat) = Nat
      fromSing SZero = Zero
      fromSing (SSucc b) = Succ (fromSing b)
      toSing Zero = SomeSing SZero
      toSing (Succ b)
        = case toSing b :: SomeSing (KProxy :: KProxy Nat) of {
            SomeSing c -> SomeSing (SSucc c) }
    instance SEq (KProxy :: KProxy Nat) where
      (%:==) SZero SZero = STrue
      (%:==) SZero (SSucc _) = SFalse
      (%:==) (SSucc _) SZero = SFalse
      (%:==) (SSucc a) (SSucc b) = (%:==) a b
    instance SDecide (KProxy :: KProxy Nat) where
      (%~) SZero SZero = Proved Refl
      (%~) SZero (SSucc _) = Disproved (\case { })
      (%~) (SSucc _) SZero = Disproved (\case { })
      (%~) (SSucc a) (SSucc b)
        = case (%~) a b of {
            Proved Refl -> Proved Refl
            Disproved contra -> Disproved (\ Refl -> contra Refl) }
    instance SingI Zero where
      sing = SZero
    instance SingI n => SingI (Succ (n :: Nat)) where
      sing = SSucc sing
GradingClient/Database.hs:0:0: Splicing declarations
    singletons
      [d| append :: Schema -> Schema -> Schema
          append (Sch s1) (Sch s2) = Sch (s1 ++ s2)
          attrNotIn :: Attribute -> Schema -> Bool
          attrNotIn _ (Sch []) = True
          attrNotIn (Attr name u) (Sch ((Attr name' _) : t))
            = (name /= name') && (attrNotIn (Attr name u) (Sch t))
          disjoint :: Schema -> Schema -> Bool
          disjoint (Sch []) _ = True
          disjoint (Sch (h : t)) s = (attrNotIn h s) && (disjoint (Sch t) s)
          occurs :: [AChar] -> Schema -> Bool
          occurs _ (Sch []) = False
          occurs name (Sch ((Attr name' _) : attrs))
            = name == name' || occurs name (Sch attrs)
          lookup :: [AChar] -> Schema -> U
          lookup _ (Sch []) = undefined
          lookup name (Sch ((Attr name' u) : attrs))
            = if name == name' then u else lookup name (Sch attrs)

          data U
            = BOOL | STRING | NAT | VEC U Nat
            deriving (Read, Eq, Show)
          data AChar
            = CA |
              CB |
              CC |
              CD |
              CE |
              CF |
              CG |
              CH |
              CI |
              CJ |
              CK |
              CL |
              CM |
              CN |
              CO |
              CP |
              CQ |
              CR |
              CS |
              CT |
              CU |
              CV |
              CW |
              CX |
              CY |
              CZ
            deriving (Read, Show, Eq)
          data Attribute = Attr [AChar] U
          data Schema = Sch [Attribute] |]
  ======>
    GradingClient/Database.hs:(0,0)-(0,0)
    data U
      = BOOL | STRING | NAT | VEC U Nat
      deriving (Read, Eq, Show)
    data AChar
      = CA |
        CB |
        CC |
        CD |
        CE |
        CF |
        CG |
        CH |
        CI |
        CJ |
        CK |
        CL |
        CM |
        CN |
        CO |
        CP |
        CQ |
        CR |
        CS |
        CT |
        CU |
        CV |
        CW |
        CX |
        CY |
        CZ
      deriving (Read, Show, Eq)
    data Attribute = Attr [AChar] U
    data Schema = Sch [Attribute]
    append :: Schema -> Schema -> Schema
    append (Sch s1) (Sch s2) = Sch (s1 ++ s2)
    attrNotIn :: Attribute -> Schema -> Bool
    attrNotIn _ (Sch GHC.Types.[]) = True
    attrNotIn (Attr name u) (Sch ((Attr name' _) GHC.Types.: t))
      = ((name /= name') && (attrNotIn (Attr name u) (Sch t)))
    disjoint :: Schema -> Schema -> Bool
    disjoint (Sch GHC.Types.[]) _ = True
    disjoint (Sch (h GHC.Types.: t)) s
      = ((attrNotIn h s) && (disjoint (Sch t) s))
    occurs :: [AChar] -> Schema -> Bool
    occurs _ (Sch GHC.Types.[]) = False
    occurs name (Sch ((Attr name' _) GHC.Types.: attrs))
      = ((name == name') || (occurs name (Sch attrs)))
    lookup :: [AChar] -> Schema -> U
    lookup _ (Sch GHC.Types.[]) = undefined
    lookup name (Sch ((Attr name' u) GHC.Types.: attrs))
      = if (name == name') then u else lookup name (Sch attrs)
    type family Equals_0123456789 (a :: U) (b :: U) :: Bool where
      Equals_0123456789 BOOL BOOL = TrueSym0
      Equals_0123456789 STRING STRING = TrueSym0
      Equals_0123456789 NAT NAT = TrueSym0
      Equals_0123456789 (VEC a a) (VEC b b) = (:&&) ((==) a b) ((==) a b)
      Equals_0123456789 (a :: U) (b :: U) = FalseSym0
    type instance (==) (a :: U) (b :: U) = Equals_0123456789 a b
    type BOOLSym0 = BOOL
    type STRINGSym0 = STRING
    type NATSym0 = NAT
    data VECSym1 (l :: U) (l :: TyFun Nat U)
    data VECSym0 (k :: TyFun U (TyFun Nat U -> *))
    type instance Apply (VECSym1 a) a = VEC a a
    type instance Apply VECSym0 a = VECSym1 a
    type family Equals_0123456789 (a :: AChar)
                                  (b :: AChar) :: Bool where
      Equals_0123456789 CA CA = TrueSym0
      Equals_0123456789 CB CB = TrueSym0
      Equals_0123456789 CC CC = TrueSym0
      Equals_0123456789 CD CD = TrueSym0
      Equals_0123456789 CE CE = TrueSym0
      Equals_0123456789 CF CF = TrueSym0
      Equals_0123456789 CG CG = TrueSym0
      Equals_0123456789 CH CH = TrueSym0
      Equals_0123456789 CI CI = TrueSym0
      Equals_0123456789 CJ CJ = TrueSym0
      Equals_0123456789 CK CK = TrueSym0
      Equals_0123456789 CL CL = TrueSym0
      Equals_0123456789 CM CM = TrueSym0
      Equals_0123456789 CN CN = TrueSym0
      Equals_0123456789 CO CO = TrueSym0
      Equals_0123456789 CP CP = TrueSym0
      Equals_0123456789 CQ CQ = TrueSym0
      Equals_0123456789 CR CR = TrueSym0
      Equals_0123456789 CS CS = TrueSym0
      Equals_0123456789 CT CT = TrueSym0
      Equals_0123456789 CU CU = TrueSym0
      Equals_0123456789 CV CV = TrueSym0
      Equals_0123456789 CW CW = TrueSym0
      Equals_0123456789 CX CX = TrueSym0
      Equals_0123456789 CY CY = TrueSym0
      Equals_0123456789 CZ CZ = TrueSym0
      Equals_0123456789 (a :: AChar) (b :: AChar) = FalseSym0
    type instance (==) (a :: AChar) (b :: AChar) = Equals_0123456789 a b
    type CASym0 = CA
    type CBSym0 = CB
    type CCSym0 = CC
    type CDSym0 = CD
    type CESym0 = CE
    type CFSym0 = CF
    type CGSym0 = CG
    type CHSym0 = CH
    type CISym0 = CI
    type CJSym0 = CJ
    type CKSym0 = CK
    type CLSym0 = CL
    type CMSym0 = CM
    type CNSym0 = CN
    type COSym0 = CO
    type CPSym0 = CP
    type CQSym0 = CQ
    type CRSym0 = CR
    type CSSym0 = CS
    type CTSym0 = CT
    type CUSym0 = CU
    type CVSym0 = CV
    type CWSym0 = CW
    type CXSym0 = CX
    type CYSym0 = CY
    type CZSym0 = CZ
    data AttrSym1 (l :: [AChar]) (l :: TyFun U Attribute)
    data AttrSym0 (k :: TyFun [AChar] (TyFun U Attribute -> *))
    type instance Apply (AttrSym1 a) a = Attr a a
    type instance Apply AttrSym0 a = AttrSym1 a
    data SchSym0 (k :: TyFun [Attribute] Schema)
    type instance Apply SchSym0 a = Sch a
    type family Append (a :: Schema) (a :: Schema) :: Schema where
      Append (Sch s1) (Sch s2) = Apply SchSym0 (Apply (Apply (:++$) s1) s2)
    data AppendSym1 (l :: Schema) (l :: TyFun Schema Schema)
    data AppendSym0 (k :: TyFun Schema (TyFun Schema Schema -> *))
    type instance Apply (AppendSym1 a) a = Append a a
    type instance Apply AppendSym0 a = AppendSym1 a
    type family AttrNotIn (a :: Attribute) (a :: Schema) :: Bool where
      AttrNotIn z (Sch GHC.Types.[]) = TrueSym0
      AttrNotIn (Attr name u) (Sch ((GHC.Types.:) (Attr name' z) t)) = Apply (Apply (:&&$) (Apply (Apply (:/=$) name) name')) (Apply (Apply AttrNotInSym0 (Apply (Apply AttrSym0 name) u)) (Apply SchSym0 t))
    data AttrNotInSym1 (l :: Attribute) (l :: TyFun Schema Bool)
    data AttrNotInSym0 (k :: TyFun Attribute (TyFun Schema Bool -> *))
    type instance Apply (AttrNotInSym1 a) a = AttrNotIn a a
    type instance Apply AttrNotInSym0 a = AttrNotInSym1 a
    type family Disjoint (a :: Schema) (a :: Schema) :: Bool where
      Disjoint (Sch GHC.Types.[]) z = TrueSym0
      Disjoint (Sch ((GHC.Types.:) h t)) s = Apply (Apply (:&&$) (Apply (Apply AttrNotInSym0 h) s)) (Apply (Apply DisjointSym0 (Apply SchSym0 t)) s)
    data DisjointSym1 (l :: Schema) (l :: TyFun Schema Bool)
    data DisjointSym0 (k :: TyFun Schema (TyFun Schema Bool -> *))
    type instance Apply (DisjointSym1 a) a = Disjoint a a
    type instance Apply DisjointSym0 a = DisjointSym1 a
    type family Occurs (a :: [AChar]) (a :: Schema) :: Bool where
      Occurs z (Sch GHC.Types.[]) = FalseSym0
      Occurs name (Sch ((GHC.Types.:) (Attr name' z) attrs)) = Apply (Apply (:||$) (Apply (Apply (:==$) name) name')) (Apply (Apply OccursSym0 name) (Apply SchSym0 attrs))
    data OccursSym1 (l :: [AChar]) (l :: TyFun Schema Bool)
    data OccursSym0 (k :: TyFun [AChar] (TyFun Schema Bool -> *))
    type instance Apply (OccursSym1 a) a = Occurs a a
    type instance Apply OccursSym0 a = OccursSym1 a
    type family Lookup (a :: [AChar]) (a :: Schema) :: U where
      Lookup z (Sch GHC.Types.[]) = Any
      Lookup name (Sch ((GHC.Types.:) (Attr name' u) attrs)) = If (Apply (Apply (:==$) name) name') u (Apply (Apply LookupSym0 name) (Apply SchSym0 attrs))
    data LookupSym1 (l :: [AChar]) (l :: TyFun Schema U)
    data LookupSym0 (k :: TyFun [AChar] (TyFun Schema U -> *))
    type instance Apply (LookupSym1 a) a = Lookup a a
    type instance Apply LookupSym0 a = LookupSym1 a
    data instance Sing (z :: U)
      = z ~ BOOL => SBOOL |
        z ~ STRING => SSTRING |
        z ~ NAT => SNAT |
        forall (n :: U) (n :: Nat). z ~ VEC n n => SVEC (Sing n) (Sing n)
    type SU (z :: U) = Sing z
    instance SingKind (KProxy :: KProxy U) where
      type DemoteRep (KProxy :: KProxy U) = U
      fromSing SBOOL = BOOL
      fromSing SSTRING = STRING
      fromSing SNAT = NAT
      fromSing (SVEC b b) = VEC (fromSing b) (fromSing b)
      toSing BOOL = SomeSing SBOOL
      toSing STRING = SomeSing SSTRING
      toSing NAT = SomeSing SNAT
      toSing (VEC b b)
        = case
              (toSing b :: SomeSing (KProxy :: KProxy U),
               toSing b :: SomeSing (KProxy :: KProxy Nat))
          of {
            (SomeSing c, SomeSing c) -> SomeSing (SVEC c c) }
    instance SEq (KProxy :: KProxy U) where
      (%:==) SBOOL SBOOL = STrue
      (%:==) SBOOL SSTRING = SFalse
      (%:==) SBOOL SNAT = SFalse
      (%:==) SBOOL (SVEC _ _) = SFalse
      (%:==) SSTRING SBOOL = SFalse
      (%:==) SSTRING SSTRING = STrue
      (%:==) SSTRING SNAT = SFalse
      (%:==) SSTRING (SVEC _ _) = SFalse
      (%:==) SNAT SBOOL = SFalse
      (%:==) SNAT SSTRING = SFalse
      (%:==) SNAT SNAT = STrue
      (%:==) SNAT (SVEC _ _) = SFalse
      (%:==) (SVEC _ _) SBOOL = SFalse
      (%:==) (SVEC _ _) SSTRING = SFalse
      (%:==) (SVEC _ _) SNAT = SFalse
      (%:==) (SVEC a a) (SVEC b b) = (%:&&) ((%:==) a b) ((%:==) a b)
    instance SDecide (KProxy :: KProxy U) where
      (%~) SBOOL SBOOL = Proved Refl
      (%~) SBOOL SSTRING = Disproved (\case { })
      (%~) SBOOL SNAT = Disproved (\case { })
      (%~) SBOOL (SVEC _ _) = Disproved (\case { })
      (%~) SSTRING SBOOL = Disproved (\case { })
      (%~) SSTRING SSTRING = Proved Refl
      (%~) SSTRING SNAT = Disproved (\case { })
      (%~) SSTRING (SVEC _ _) = Disproved (\case { })
      (%~) SNAT SBOOL = Disproved (\case { })
      (%~) SNAT SSTRING = Disproved (\case { })
      (%~) SNAT SNAT = Proved Refl
      (%~) SNAT (SVEC _ _) = Disproved (\case { })
      (%~) (SVEC _ _) SBOOL = Disproved (\case { })
      (%~) (SVEC _ _) SSTRING = Disproved (\case { })
      (%~) (SVEC _ _) SNAT = Disproved (\case { })
      (%~) (SVEC a a) (SVEC b b)
        = case ((%~) a b, (%~) a b) of {
            (Proved Refl, Proved Refl) -> Proved Refl
            (Disproved contra, _) -> Disproved (\ Refl -> contra Refl)
            (_, Disproved contra) -> Disproved (\ Refl -> contra Refl) }
    instance SingI BOOL where
      sing = SBOOL
    instance SingI STRING where
      sing = SSTRING
    instance SingI NAT where
      sing = SNAT
    instance (SingI n, SingI n) =>
             SingI (VEC (n :: U) (n :: Nat)) where
      sing = SVEC sing sing
    data instance Sing (z :: AChar)
      = z ~ CA => SCA |
        z ~ CB => SCB |
        z ~ CC => SCC |
        z ~ CD => SCD |
        z ~ CE => SCE |
        z ~ CF => SCF |
        z ~ CG => SCG |
        z ~ CH => SCH |
        z ~ CI => SCI |
        z ~ CJ => SCJ |
        z ~ CK => SCK |
        z ~ CL => SCL |
        z ~ CM => SCM |
        z ~ CN => SCN |
        z ~ CO => SCO |
        z ~ CP => SCP |
        z ~ CQ => SCQ |
        z ~ CR => SCR |
        z ~ CS => SCS |
        z ~ CT => SCT |
        z ~ CU => SCU |
        z ~ CV => SCV |
        z ~ CW => SCW |
        z ~ CX => SCX |
        z ~ CY => SCY |
        z ~ CZ => SCZ
    type SAChar (z :: AChar) = Sing z
    instance SingKind (KProxy :: KProxy AChar) where
      type DemoteRep (KProxy :: KProxy AChar) = AChar
      fromSing SCA = CA
      fromSing SCB = CB
      fromSing SCC = CC
      fromSing SCD = CD
      fromSing SCE = CE
      fromSing SCF = CF
      fromSing SCG = CG
      fromSing SCH = CH
      fromSing SCI = CI
      fromSing SCJ = CJ
      fromSing SCK = CK
      fromSing SCL = CL
      fromSing SCM = CM
      fromSing SCN = CN
      fromSing SCO = CO
      fromSing SCP = CP
      fromSing SCQ = CQ
      fromSing SCR = CR
      fromSing SCS = CS
      fromSing SCT = CT
      fromSing SCU = CU
      fromSing SCV = CV
      fromSing SCW = CW
      fromSing SCX = CX
      fromSing SCY = CY
      fromSing SCZ = CZ
      toSing CA = SomeSing SCA
      toSing CB = SomeSing SCB
      toSing CC = SomeSing SCC
      toSing CD = SomeSing SCD
      toSing CE = SomeSing SCE
      toSing CF = SomeSing SCF
      toSing CG = SomeSing SCG
      toSing CH = SomeSing SCH
      toSing CI = SomeSing SCI
      toSing CJ = SomeSing SCJ
      toSing CK = SomeSing SCK
      toSing CL = SomeSing SCL
      toSing CM = SomeSing SCM
      toSing CN = SomeSing SCN
      toSing CO = SomeSing SCO
      toSing CP = SomeSing SCP
      toSing CQ = SomeSing SCQ
      toSing CR = SomeSing SCR
      toSing CS = SomeSing SCS
      toSing CT = SomeSing SCT
      toSing CU = SomeSing SCU
      toSing CV = SomeSing SCV
      toSing CW = SomeSing SCW
      toSing CX = SomeSing SCX
      toSing CY = SomeSing SCY
      toSing CZ = SomeSing SCZ
    instance SEq (KProxy :: KProxy AChar) where
      (%:==) SCA SCA = STrue
      (%:==) SCA SCB = SFalse
      (%:==) SCA SCC = SFalse
      (%:==) SCA SCD = SFalse
      (%:==) SCA SCE = SFalse
      (%:==) SCA SCF = SFalse
      (%:==) SCA SCG = SFalse
      (%:==) SCA SCH = SFalse
      (%:==) SCA SCI = SFalse
      (%:==) SCA SCJ = SFalse
      (%:==) SCA SCK = SFalse
      (%:==) SCA SCL = SFalse
      (%:==) SCA SCM = SFalse
      (%:==) SCA SCN = SFalse
      (%:==) SCA SCO = SFalse
      (%:==) SCA SCP = SFalse
      (%:==) SCA SCQ = SFalse
      (%:==) SCA SCR = SFalse
      (%:==) SCA SCS = SFalse
      (%:==) SCA SCT = SFalse
      (%:==) SCA SCU = SFalse
      (%:==) SCA SCV = SFalse
      (%:==) SCA SCW = SFalse
      (%:==) SCA SCX = SFalse
      (%:==) SCA SCY = SFalse
      (%:==) SCA SCZ = SFalse
      (%:==) SCB SCA = SFalse
      (%:==) SCB SCB = STrue
      (%:==) SCB SCC = SFalse
      (%:==) SCB SCD = SFalse
      (%:==) SCB SCE = SFalse
      (%:==) SCB SCF = SFalse
      (%:==) SCB SCG = SFalse
      (%:==) SCB SCH = SFalse
      (%:==) SCB SCI = SFalse
      (%:==) SCB SCJ = SFalse
      (%:==) SCB SCK = SFalse
      (%:==) SCB SCL = SFalse
      (%:==) SCB SCM = SFalse
      (%:==) SCB SCN = SFalse
      (%:==) SCB SCO = SFalse
      (%:==) SCB SCP = SFalse
      (%:==) SCB SCQ = SFalse
      (%:==) SCB SCR = SFalse
      (%:==) SCB SCS = SFalse
      (%:==) SCB SCT = SFalse
      (%:==) SCB SCU = SFalse
      (%:==) SCB SCV = SFalse
      (%:==) SCB SCW = SFalse
      (%:==) SCB SCX = SFalse
      (%:==) SCB SCY = SFalse
      (%:==) SCB SCZ = SFalse
      (%:==) SCC SCA = SFalse
      (%:==) SCC SCB = SFalse
      (%:==) SCC SCC = STrue
      (%:==) SCC SCD = SFalse
      (%:==) SCC SCE = SFalse
      (%:==) SCC SCF = SFalse
      (%:==) SCC SCG = SFalse
      (%:==) SCC SCH = SFalse
      (%:==) SCC SCI = SFalse
      (%:==) SCC SCJ = SFalse
      (%:==) SCC SCK = SFalse
      (%:==) SCC SCL = SFalse
      (%:==) SCC SCM = SFalse
      (%:==) SCC SCN = SFalse
      (%:==) SCC SCO = SFalse
      (%:==) SCC SCP = SFalse
      (%:==) SCC SCQ = SFalse
      (%:==) SCC SCR = SFalse
      (%:==) SCC SCS = SFalse
      (%:==) SCC SCT = SFalse
      (%:==) SCC SCU = SFalse
      (%:==) SCC SCV = SFalse
      (%:==) SCC SCW = SFalse
      (%:==) SCC SCX = SFalse
      (%:==) SCC SCY = SFalse
      (%:==) SCC SCZ = SFalse
      (%:==) SCD SCA = SFalse
      (%:==) SCD SCB = SFalse
      (%:==) SCD SCC = SFalse
      (%:==) SCD SCD = STrue
      (%:==) SCD SCE = SFalse
      (%:==) SCD SCF = SFalse
      (%:==) SCD SCG = SFalse
      (%:==) SCD SCH = SFalse
      (%:==) SCD SCI = SFalse
      (%:==) SCD SCJ = SFalse
      (%:==) SCD SCK = SFalse
      (%:==) SCD SCL = SFalse
      (%:==) SCD SCM = SFalse
      (%:==) SCD SCN = SFalse
      (%:==) SCD SCO = SFalse
      (%:==) SCD SCP = SFalse
      (%:==) SCD SCQ = SFalse
      (%:==) SCD SCR = SFalse
      (%:==) SCD SCS = SFalse
      (%:==) SCD SCT = SFalse
      (%:==) SCD SCU = SFalse
      (%:==) SCD SCV = SFalse
      (%:==) SCD SCW = SFalse
      (%:==) SCD SCX = SFalse
      (%:==) SCD SCY = SFalse
      (%:==) SCD SCZ = SFalse
      (%:==) SCE SCA = SFalse
      (%:==) SCE SCB = SFalse
      (%:==) SCE SCC = SFalse
      (%:==) SCE SCD = SFalse
      (%:==) SCE SCE = STrue
      (%:==) SCE SCF = SFalse
      (%:==) SCE SCG = SFalse
      (%:==) SCE SCH = SFalse
      (%:==) SCE SCI = SFalse
      (%:==) SCE SCJ = SFalse
      (%:==) SCE SCK = SFalse
      (%:==) SCE SCL = SFalse
      (%:==) SCE SCM = SFalse
      (%:==) SCE SCN = SFalse
      (%:==) SCE SCO = SFalse
      (%:==) SCE SCP = SFalse
      (%:==) SCE SCQ = SFalse
      (%:==) SCE SCR = SFalse
      (%:==) SCE SCS = SFalse
      (%:==) SCE SCT = SFalse
      (%:==) SCE SCU = SFalse
      (%:==) SCE SCV = SFalse
      (%:==) SCE SCW = SFalse
      (%:==) SCE SCX = SFalse
      (%:==) SCE SCY = SFalse
      (%:==) SCE SCZ = SFalse
      (%:==) SCF SCA = SFalse
      (%:==) SCF SCB = SFalse
      (%:==) SCF SCC = SFalse
      (%:==) SCF SCD = SFalse
      (%:==) SCF SCE = SFalse
      (%:==) SCF SCF = STrue
      (%:==) SCF SCG = SFalse
      (%:==) SCF SCH = SFalse
      (%:==) SCF SCI = SFalse
      (%:==) SCF SCJ = SFalse
      (%:==) SCF SCK = SFalse
      (%:==) SCF SCL = SFalse
      (%:==) SCF SCM = SFalse
      (%:==) SCF SCN = SFalse
      (%:==) SCF SCO = SFalse
      (%:==) SCF SCP = SFalse
      (%:==) SCF SCQ = SFalse
      (%:==) SCF SCR = SFalse
      (%:==) SCF SCS = SFalse
      (%:==) SCF SCT = SFalse
      (%:==) SCF SCU = SFalse
      (%:==) SCF SCV = SFalse
      (%:==) SCF SCW = SFalse
      (%:==) SCF SCX = SFalse
      (%:==) SCF SCY = SFalse
      (%:==) SCF SCZ = SFalse
      (%:==) SCG SCA = SFalse
      (%:==) SCG SCB = SFalse
      (%:==) SCG SCC = SFalse
      (%:==) SCG SCD = SFalse
      (%:==) SCG SCE = SFalse
      (%:==) SCG SCF = SFalse
      (%:==) SCG SCG = STrue
      (%:==) SCG SCH = SFalse
      (%:==) SCG SCI = SFalse
      (%:==) SCG SCJ = SFalse
      (%:==) SCG SCK = SFalse
      (%:==) SCG SCL = SFalse
      (%:==) SCG SCM = SFalse
      (%:==) SCG SCN = SFalse
      (%:==) SCG SCO = SFalse
      (%:==) SCG SCP = SFalse
      (%:==) SCG SCQ = SFalse
      (%:==) SCG SCR = SFalse
      (%:==) SCG SCS = SFalse
      (%:==) SCG SCT = SFalse
      (%:==) SCG SCU = SFalse
      (%:==) SCG SCV = SFalse
      (%:==) SCG SCW = SFalse
      (%:==) SCG SCX = SFalse
      (%:==) SCG SCY = SFalse
      (%:==) SCG SCZ = SFalse
      (%:==) SCH SCA = SFalse
      (%:==) SCH SCB = SFalse
      (%:==) SCH SCC = SFalse
      (%:==) SCH SCD = SFalse
      (%:==) SCH SCE = SFalse
      (%:==) SCH SCF = SFalse
      (%:==) SCH SCG = SFalse
      (%:==) SCH SCH = STrue
      (%:==) SCH SCI = SFalse
      (%:==) SCH SCJ = SFalse
      (%:==) SCH SCK = SFalse
      (%:==) SCH SCL = SFalse
      (%:==) SCH SCM = SFalse
      (%:==) SCH SCN = SFalse
      (%:==) SCH SCO = SFalse
      (%:==) SCH SCP = SFalse
      (%:==) SCH SCQ = SFalse
      (%:==) SCH SCR = SFalse
      (%:==) SCH SCS = SFalse
      (%:==) SCH SCT = SFalse
      (%:==) SCH SCU = SFalse
      (%:==) SCH SCV = SFalse
      (%:==) SCH SCW = SFalse
      (%:==) SCH SCX = SFalse
      (%:==) SCH SCY = SFalse
      (%:==) SCH SCZ = SFalse
      (%:==) SCI SCA = SFalse
      (%:==) SCI SCB = SFalse
      (%:==) SCI SCC = SFalse
      (%:==) SCI SCD = SFalse
      (%:==) SCI SCE = SFalse
      (%:==) SCI SCF = SFalse
      (%:==) SCI SCG = SFalse
      (%:==) SCI SCH = SFalse
      (%:==) SCI SCI = STrue
      (%:==) SCI SCJ = SFalse
      (%:==) SCI SCK = SFalse
      (%:==) SCI SCL = SFalse
      (%:==) SCI SCM = SFalse
      (%:==) SCI SCN = SFalse
      (%:==) SCI SCO = SFalse
      (%:==) SCI SCP = SFalse
      (%:==) SCI SCQ = SFalse
      (%:==) SCI SCR = SFalse
      (%:==) SCI SCS = SFalse
      (%:==) SCI SCT = SFalse
      (%:==) SCI SCU = SFalse
      (%:==) SCI SCV = SFalse
      (%:==) SCI SCW = SFalse
      (%:==) SCI SCX = SFalse
      (%:==) SCI SCY = SFalse
      (%:==) SCI SCZ = SFalse
      (%:==) SCJ SCA = SFalse
      (%:==) SCJ SCB = SFalse
      (%:==) SCJ SCC = SFalse
      (%:==) SCJ SCD = SFalse
      (%:==) SCJ SCE = SFalse
      (%:==) SCJ SCF = SFalse
      (%:==) SCJ SCG = SFalse
      (%:==) SCJ SCH = SFalse
      (%:==) SCJ SCI = SFalse
      (%:==) SCJ SCJ = STrue
      (%:==) SCJ SCK = SFalse
      (%:==) SCJ SCL = SFalse
      (%:==) SCJ SCM = SFalse
      (%:==) SCJ SCN = SFalse
      (%:==) SCJ SCO = SFalse
      (%:==) SCJ SCP = SFalse
      (%:==) SCJ SCQ = SFalse
      (%:==) SCJ SCR = SFalse
      (%:==) SCJ SCS = SFalse
      (%:==) SCJ SCT = SFalse
      (%:==) SCJ SCU = SFalse
      (%:==) SCJ SCV = SFalse
      (%:==) SCJ SCW = SFalse
      (%:==) SCJ SCX = SFalse
      (%:==) SCJ SCY = SFalse
      (%:==) SCJ SCZ = SFalse
      (%:==) SCK SCA = SFalse
      (%:==) SCK SCB = SFalse
      (%:==) SCK SCC = SFalse
      (%:==) SCK SCD = SFalse
      (%:==) SCK SCE = SFalse
      (%:==) SCK SCF = SFalse
      (%:==) SCK SCG = SFalse
      (%:==) SCK SCH = SFalse
      (%:==) SCK SCI = SFalse
      (%:==) SCK SCJ = SFalse
      (%:==) SCK SCK = STrue
      (%:==) SCK SCL = SFalse
      (%:==) SCK SCM = SFalse
      (%:==) SCK SCN = SFalse
      (%:==) SCK SCO = SFalse
      (%:==) SCK SCP = SFalse
      (%:==) SCK SCQ = SFalse
      (%:==) SCK SCR = SFalse
      (%:==) SCK SCS = SFalse
      (%:==) SCK SCT = SFalse
      (%:==) SCK SCU = SFalse
      (%:==) SCK SCV = SFalse
      (%:==) SCK SCW = SFalse
      (%:==) SCK SCX = SFalse
      (%:==) SCK SCY = SFalse
      (%:==) SCK SCZ = SFalse
      (%:==) SCL SCA = SFalse
      (%:==) SCL SCB = SFalse
      (%:==) SCL SCC = SFalse
      (%:==) SCL SCD = SFalse
      (%:==) SCL SCE = SFalse
      (%:==) SCL SCF = SFalse
      (%:==) SCL SCG = SFalse
      (%:==) SCL SCH = SFalse
      (%:==) SCL SCI = SFalse
      (%:==) SCL SCJ = SFalse
      (%:==) SCL SCK = SFalse
      (%:==) SCL SCL = STrue
      (%:==) SCL SCM = SFalse
      (%:==) SCL SCN = SFalse
      (%:==) SCL SCO = SFalse
      (%:==) SCL SCP = SFalse
      (%:==) SCL SCQ = SFalse
      (%:==) SCL SCR = SFalse
      (%:==) SCL SCS = SFalse
      (%:==) SCL SCT = SFalse
      (%:==) SCL SCU = SFalse
      (%:==) SCL SCV = SFalse
      (%:==) SCL SCW = SFalse
      (%:==) SCL SCX = SFalse
      (%:==) SCL SCY = SFalse
      (%:==) SCL SCZ = SFalse
      (%:==) SCM SCA = SFalse
      (%:==) SCM SCB = SFalse
      (%:==) SCM SCC = SFalse
      (%:==) SCM SCD = SFalse
      (%:==) SCM SCE = SFalse
      (%:==) SCM SCF = SFalse
      (%:==) SCM SCG = SFalse
      (%:==) SCM SCH = SFalse
      (%:==) SCM SCI = SFalse
      (%:==) SCM SCJ = SFalse
      (%:==) SCM SCK = SFalse
      (%:==) SCM SCL = SFalse
      (%:==) SCM SCM = STrue
      (%:==) SCM SCN = SFalse
      (%:==) SCM SCO = SFalse
      (%:==) SCM SCP = SFalse
      (%:==) SCM SCQ = SFalse
      (%:==) SCM SCR = SFalse
      (%:==) SCM SCS = SFalse
      (%:==) SCM SCT = SFalse
      (%:==) SCM SCU = SFalse
      (%:==) SCM SCV = SFalse
      (%:==) SCM SCW = SFalse
      (%:==) SCM SCX = SFalse
      (%:==) SCM SCY = SFalse
      (%:==) SCM SCZ = SFalse
      (%:==) SCN SCA = SFalse
      (%:==) SCN SCB = SFalse
      (%:==) SCN SCC = SFalse
      (%:==) SCN SCD = SFalse
      (%:==) SCN SCE = SFalse
      (%:==) SCN SCF = SFalse
      (%:==) SCN SCG = SFalse
      (%:==) SCN SCH = SFalse
      (%:==) SCN SCI = SFalse
      (%:==) SCN SCJ = SFalse
      (%:==) SCN SCK = SFalse
      (%:==) SCN SCL = SFalse
      (%:==) SCN SCM = SFalse
      (%:==) SCN SCN = STrue
      (%:==) SCN SCO = SFalse
      (%:==) SCN SCP = SFalse
      (%:==) SCN SCQ = SFalse
      (%:==) SCN SCR = SFalse
      (%:==) SCN SCS = SFalse
      (%:==) SCN SCT = SFalse
      (%:==) SCN SCU = SFalse
      (%:==) SCN SCV = SFalse
      (%:==) SCN SCW = SFalse
      (%:==) SCN SCX = SFalse
      (%:==) SCN SCY = SFalse
      (%:==) SCN SCZ = SFalse
      (%:==) SCO SCA = SFalse
      (%:==) SCO SCB = SFalse
      (%:==) SCO SCC = SFalse
      (%:==) SCO SCD = SFalse
      (%:==) SCO SCE = SFalse
      (%:==) SCO SCF = SFalse
      (%:==) SCO SCG = SFalse
      (%:==) SCO SCH = SFalse
      (%:==) SCO SCI = SFalse
      (%:==) SCO SCJ = SFalse
      (%:==) SCO SCK = SFalse
      (%:==) SCO SCL = SFalse
      (%:==) SCO SCM = SFalse
      (%:==) SCO SCN = SFalse
      (%:==) SCO SCO = STrue
      (%:==) SCO SCP = SFalse
      (%:==) SCO SCQ = SFalse
      (%:==) SCO SCR = SFalse
      (%:==) SCO SCS = SFalse
      (%:==) SCO SCT = SFalse
      (%:==) SCO SCU = SFalse
      (%:==) SCO SCV = SFalse
      (%:==) SCO SCW = SFalse
      (%:==) SCO SCX = SFalse
      (%:==) SCO SCY = SFalse
      (%:==) SCO SCZ = SFalse
      (%:==) SCP SCA = SFalse
      (%:==) SCP SCB = SFalse
      (%:==) SCP SCC = SFalse
      (%:==) SCP SCD = SFalse
      (%:==) SCP SCE = SFalse
      (%:==) SCP SCF = SFalse
      (%:==) SCP SCG = SFalse
      (%:==) SCP SCH = SFalse
      (%:==) SCP SCI = SFalse
      (%:==) SCP SCJ = SFalse
      (%:==) SCP SCK = SFalse
      (%:==) SCP SCL = SFalse
      (%:==) SCP SCM = SFalse
      (%:==) SCP SCN = SFalse
      (%:==) SCP SCO = SFalse
      (%:==) SCP SCP = STrue
      (%:==) SCP SCQ = SFalse
      (%:==) SCP SCR = SFalse
      (%:==) SCP SCS = SFalse
      (%:==) SCP SCT = SFalse
      (%:==) SCP SCU = SFalse
      (%:==) SCP SCV = SFalse
      (%:==) SCP SCW = SFalse
      (%:==) SCP SCX = SFalse
      (%:==) SCP SCY = SFalse
      (%:==) SCP SCZ = SFalse
      (%:==) SCQ SCA = SFalse
      (%:==) SCQ SCB = SFalse
      (%:==) SCQ SCC = SFalse
      (%:==) SCQ SCD = SFalse
      (%:==) SCQ SCE = SFalse
      (%:==) SCQ SCF = SFalse
      (%:==) SCQ SCG = SFalse
      (%:==) SCQ SCH = SFalse
      (%:==) SCQ SCI = SFalse
      (%:==) SCQ SCJ = SFalse
      (%:==) SCQ SCK = SFalse
      (%:==) SCQ SCL = SFalse
      (%:==) SCQ SCM = SFalse
      (%:==) SCQ SCN = SFalse
      (%:==) SCQ SCO = SFalse
      (%:==) SCQ SCP = SFalse
      (%:==) SCQ SCQ = STrue
      (%:==) SCQ SCR = SFalse
      (%:==) SCQ SCS = SFalse
      (%:==) SCQ SCT = SFalse
      (%:==) SCQ SCU = SFalse
      (%:==) SCQ SCV = SFalse
      (%:==) SCQ SCW = SFalse
      (%:==) SCQ SCX = SFalse
      (%:==) SCQ SCY = SFalse
      (%:==) SCQ SCZ = SFalse
      (%:==) SCR SCA = SFalse
      (%:==) SCR SCB = SFalse
      (%:==) SCR SCC = SFalse
      (%:==) SCR SCD = SFalse
      (%:==) SCR SCE = SFalse
      (%:==) SCR SCF = SFalse
      (%:==) SCR SCG = SFalse
      (%:==) SCR SCH = SFalse
      (%:==) SCR SCI = SFalse
      (%:==) SCR SCJ = SFalse
      (%:==) SCR SCK = SFalse
      (%:==) SCR SCL = SFalse
      (%:==) SCR SCM = SFalse
      (%:==) SCR SCN = SFalse
      (%:==) SCR SCO = SFalse
      (%:==) SCR SCP = SFalse
      (%:==) SCR SCQ = SFalse
      (%:==) SCR SCR = STrue
      (%:==) SCR SCS = SFalse
      (%:==) SCR SCT = SFalse
      (%:==) SCR SCU = SFalse
      (%:==) SCR SCV = SFalse
      (%:==) SCR SCW = SFalse
      (%:==) SCR SCX = SFalse
      (%:==) SCR SCY = SFalse
      (%:==) SCR SCZ = SFalse
      (%:==) SCS SCA = SFalse
      (%:==) SCS SCB = SFalse
      (%:==) SCS SCC = SFalse
      (%:==) SCS SCD = SFalse
      (%:==) SCS SCE = SFalse
      (%:==) SCS SCF = SFalse
      (%:==) SCS SCG = SFalse
      (%:==) SCS SCH = SFalse
      (%:==) SCS SCI = SFalse
      (%:==) SCS SCJ = SFalse
      (%:==) SCS SCK = SFalse
      (%:==) SCS SCL = SFalse
      (%:==) SCS SCM = SFalse
      (%:==) SCS SCN = SFalse
      (%:==) SCS SCO = SFalse
      (%:==) SCS SCP = SFalse
      (%:==) SCS SCQ = SFalse
      (%:==) SCS SCR = SFalse
      (%:==) SCS SCS = STrue
      (%:==) SCS SCT = SFalse
      (%:==) SCS SCU = SFalse
      (%:==) SCS SCV = SFalse
      (%:==) SCS SCW = SFalse
      (%:==) SCS SCX = SFalse
      (%:==) SCS SCY = SFalse
      (%:==) SCS SCZ = SFalse
      (%:==) SCT SCA = SFalse
      (%:==) SCT SCB = SFalse
      (%:==) SCT SCC = SFalse
      (%:==) SCT SCD = SFalse
      (%:==) SCT SCE = SFalse
      (%:==) SCT SCF = SFalse
      (%:==) SCT SCG = SFalse
      (%:==) SCT SCH = SFalse
      (%:==) SCT SCI = SFalse
      (%:==) SCT SCJ = SFalse
      (%:==) SCT SCK = SFalse
      (%:==) SCT SCL = SFalse
      (%:==) SCT SCM = SFalse
      (%:==) SCT SCN = SFalse
      (%:==) SCT SCO = SFalse
      (%:==) SCT SCP = SFalse
      (%:==) SCT SCQ = SFalse
      (%:==) SCT SCR = SFalse
      (%:==) SCT SCS = SFalse
      (%:==) SCT SCT = STrue
      (%:==) SCT SCU = SFalse
      (%:==) SCT SCV = SFalse
      (%:==) SCT SCW = SFalse
      (%:==) SCT SCX = SFalse
      (%:==) SCT SCY = SFalse
      (%:==) SCT SCZ = SFalse
      (%:==) SCU SCA = SFalse
      (%:==) SCU SCB = SFalse
      (%:==) SCU SCC = SFalse
      (%:==) SCU SCD = SFalse
      (%:==) SCU SCE = SFalse
      (%:==) SCU SCF = SFalse
      (%:==) SCU SCG = SFalse
      (%:==) SCU SCH = SFalse
      (%:==) SCU SCI = SFalse
      (%:==) SCU SCJ = SFalse
      (%:==) SCU SCK = SFalse
      (%:==) SCU SCL = SFalse
      (%:==) SCU SCM = SFalse
      (%:==) SCU SCN = SFalse
      (%:==) SCU SCO = SFalse
      (%:==) SCU SCP = SFalse
      (%:==) SCU SCQ = SFalse
      (%:==) SCU SCR = SFalse
      (%:==) SCU SCS = SFalse
      (%:==) SCU SCT = SFalse
      (%:==) SCU SCU = STrue
      (%:==) SCU SCV = SFalse
      (%:==) SCU SCW = SFalse
      (%:==) SCU SCX = SFalse
      (%:==) SCU SCY = SFalse
      (%:==) SCU SCZ = SFalse
      (%:==) SCV SCA = SFalse
      (%:==) SCV SCB = SFalse
      (%:==) SCV SCC = SFalse
      (%:==) SCV SCD = SFalse
      (%:==) SCV SCE = SFalse
      (%:==) SCV SCF = SFalse
      (%:==) SCV SCG = SFalse
      (%:==) SCV SCH = SFalse
      (%:==) SCV SCI = SFalse
      (%:==) SCV SCJ = SFalse
      (%:==) SCV SCK = SFalse
      (%:==) SCV SCL = SFalse
      (%:==) SCV SCM = SFalse
      (%:==) SCV SCN = SFalse
      (%:==) SCV SCO = SFalse
      (%:==) SCV SCP = SFalse
      (%:==) SCV SCQ = SFalse
      (%:==) SCV SCR = SFalse
      (%:==) SCV SCS = SFalse
      (%:==) SCV SCT = SFalse
      (%:==) SCV SCU = SFalse
      (%:==) SCV SCV = STrue
      (%:==) SCV SCW = SFalse
      (%:==) SCV SCX = SFalse
      (%:==) SCV SCY = SFalse
      (%:==) SCV SCZ = SFalse
      (%:==) SCW SCA = SFalse
      (%:==) SCW SCB = SFalse
      (%:==) SCW SCC = SFalse
      (%:==) SCW SCD = SFalse
      (%:==) SCW SCE = SFalse
      (%:==) SCW SCF = SFalse
      (%:==) SCW SCG = SFalse
      (%:==) SCW SCH = SFalse
      (%:==) SCW SCI = SFalse
      (%:==) SCW SCJ = SFalse
      (%:==) SCW SCK = SFalse
      (%:==) SCW SCL = SFalse
      (%:==) SCW SCM = SFalse
      (%:==) SCW SCN = SFalse
      (%:==) SCW SCO = SFalse
      (%:==) SCW SCP = SFalse
      (%:==) SCW SCQ = SFalse
      (%:==) SCW SCR = SFalse
      (%:==) SCW SCS = SFalse
      (%:==) SCW SCT = SFalse
      (%:==) SCW SCU = SFalse
      (%:==) SCW SCV = SFalse
      (%:==) SCW SCW = STrue
      (%:==) SCW SCX = SFalse
      (%:==) SCW SCY = SFalse
      (%:==) SCW SCZ = SFalse
      (%:==) SCX SCA = SFalse
      (%:==) SCX SCB = SFalse
      (%:==) SCX SCC = SFalse
      (%:==) SCX SCD = SFalse
      (%:==) SCX SCE = SFalse
      (%:==) SCX SCF = SFalse
      (%:==) SCX SCG = SFalse
      (%:==) SCX SCH = SFalse
      (%:==) SCX SCI = SFalse
      (%:==) SCX SCJ = SFalse
      (%:==) SCX SCK = SFalse
      (%:==) SCX SCL = SFalse
      (%:==) SCX SCM = SFalse
      (%:==) SCX SCN = SFalse
      (%:==) SCX SCO = SFalse
      (%:==) SCX SCP = SFalse
      (%:==) SCX SCQ = SFalse
      (%:==) SCX SCR = SFalse
      (%:==) SCX SCS = SFalse
      (%:==) SCX SCT = SFalse
      (%:==) SCX SCU = SFalse
      (%:==) SCX SCV = SFalse
      (%:==) SCX SCW = SFalse
      (%:==) SCX SCX = STrue
      (%:==) SCX SCY = SFalse
      (%:==) SCX SCZ = SFalse
      (%:==) SCY SCA = SFalse
      (%:==) SCY SCB = SFalse
      (%:==) SCY SCC = SFalse
      (%:==) SCY SCD = SFalse
      (%:==) SCY SCE = SFalse
      (%:==) SCY SCF = SFalse
      (%:==) SCY SCG = SFalse
      (%:==) SCY SCH = SFalse
      (%:==) SCY SCI = SFalse
      (%:==) SCY SCJ = SFalse
      (%:==) SCY SCK = SFalse
      (%:==) SCY SCL = SFalse
      (%:==) SCY SCM = SFalse
      (%:==) SCY SCN = SFalse
      (%:==) SCY SCO = SFalse
      (%:==) SCY SCP = SFalse
      (%:==) SCY SCQ = SFalse
      (%:==) SCY SCR = SFalse
      (%:==) SCY SCS = SFalse
      (%:==) SCY SCT = SFalse
      (%:==) SCY SCU = SFalse
      (%:==) SCY SCV = SFalse
      (%:==) SCY SCW = SFalse
      (%:==) SCY SCX = SFalse
      (%:==) SCY SCY = STrue
      (%:==) SCY SCZ = SFalse
      (%:==) SCZ SCA = SFalse
      (%:==) SCZ SCB = SFalse
      (%:==) SCZ SCC = SFalse
      (%:==) SCZ SCD = SFalse
      (%:==) SCZ SCE = SFalse
      (%:==) SCZ SCF = SFalse
      (%:==) SCZ SCG = SFalse
      (%:==) SCZ SCH = SFalse
      (%:==) SCZ SCI = SFalse
      (%:==) SCZ SCJ = SFalse
      (%:==) SCZ SCK = SFalse
      (%:==) SCZ SCL = SFalse
      (%:==) SCZ SCM = SFalse
      (%:==) SCZ SCN = SFalse
      (%:==) SCZ SCO = SFalse
      (%:==) SCZ SCP = SFalse
      (%:==) SCZ SCQ = SFalse
      (%:==) SCZ SCR = SFalse
      (%:==) SCZ SCS = SFalse
      (%:==) SCZ SCT = SFalse
      (%:==) SCZ SCU = SFalse
      (%:==) SCZ SCV = SFalse
      (%:==) SCZ SCW = SFalse
      (%:==) SCZ SCX = SFalse
      (%:==) SCZ SCY = SFalse
      (%:==) SCZ SCZ = STrue
    instance SDecide (KProxy :: KProxy AChar) where
      (%~) SCA SCA = Proved Refl
      (%~) SCA SCB = Disproved (\case { })
      (%~) SCA SCC = Disproved (\case { })
      (%~) SCA SCD = Disproved (\case { })
      (%~) SCA SCE = Disproved (\case { })
      (%~) SCA SCF = Disproved (\case { })
      (%~) SCA SCG = Disproved (\case { })
      (%~) SCA SCH = Disproved (\case { })
      (%~) SCA SCI = Disproved (\case { })
      (%~) SCA SCJ = Disproved (\case { })
      (%~) SCA SCK = Disproved (\case { })
      (%~) SCA SCL = Disproved (\case { })
      (%~) SCA SCM = Disproved (\case { })
      (%~) SCA SCN = Disproved (\case { })
      (%~) SCA SCO = Disproved (\case { })
      (%~) SCA SCP = Disproved (\case { })
      (%~) SCA SCQ = Disproved (\case { })
      (%~) SCA SCR = Disproved (\case { })
      (%~) SCA SCS = Disproved (\case { })
      (%~) SCA SCT = Disproved (\case { })
      (%~) SCA SCU = Disproved (\case { })
      (%~) SCA SCV = Disproved (\case { })
      (%~) SCA SCW = Disproved (\case { })
      (%~) SCA SCX = Disproved (\case { })
      (%~) SCA SCY = Disproved (\case { })
      (%~) SCA SCZ = Disproved (\case { })
      (%~) SCB SCA = Disproved (\case { })
      (%~) SCB SCB = Proved Refl
      (%~) SCB SCC = Disproved (\case { })
      (%~) SCB SCD = Disproved (\case { })
      (%~) SCB SCE = Disproved (\case { })
      (%~) SCB SCF = Disproved (\case { })
      (%~) SCB SCG = Disproved (\case { })
      (%~) SCB SCH = Disproved (\case { })
      (%~) SCB SCI = Disproved (\case { })
      (%~) SCB SCJ = Disproved (\case { })
      (%~) SCB SCK = Disproved (\case { })
      (%~) SCB SCL = Disproved (\case { })
      (%~) SCB SCM = Disproved (\case { })
      (%~) SCB SCN = Disproved (\case { })
      (%~) SCB SCO = Disproved (\case { })
      (%~) SCB SCP = Disproved (\case { })
      (%~) SCB SCQ = Disproved (\case { })
      (%~) SCB SCR = Disproved (\case { })
      (%~) SCB SCS = Disproved (\case { })
      (%~) SCB SCT = Disproved (\case { })
      (%~) SCB SCU = Disproved (\case { })
      (%~) SCB SCV = Disproved (\case { })
      (%~) SCB SCW = Disproved (\case { })
      (%~) SCB SCX = Disproved (\case { })
      (%~) SCB SCY = Disproved (\case { })
      (%~) SCB SCZ = Disproved (\case { })
      (%~) SCC SCA = Disproved (\case { })
      (%~) SCC SCB = Disproved (\case { })
      (%~) SCC SCC = Proved Refl
      (%~) SCC SCD = Disproved (\case { })
      (%~) SCC SCE = Disproved (\case { })
      (%~) SCC SCF = Disproved (\case { })
      (%~) SCC SCG = Disproved (\case { })
      (%~) SCC SCH = Disproved (\case { })
      (%~) SCC SCI = Disproved (\case { })
      (%~) SCC SCJ = Disproved (\case { })
      (%~) SCC SCK = Disproved (\case { })
      (%~) SCC SCL = Disproved (\case { })
      (%~) SCC SCM = Disproved (\case { })
      (%~) SCC SCN = Disproved (\case { })
      (%~) SCC SCO = Disproved (\case { })
      (%~) SCC SCP = Disproved (\case { })
      (%~) SCC SCQ = Disproved (\case { })
      (%~) SCC SCR = Disproved (\case { })
      (%~) SCC SCS = Disproved (\case { })
      (%~) SCC SCT = Disproved (\case { })
      (%~) SCC SCU = Disproved (\case { })
      (%~) SCC SCV = Disproved (\case { })
      (%~) SCC SCW = Disproved (\case { })
      (%~) SCC SCX = Disproved (\case { })
      (%~) SCC SCY = Disproved (\case { })
      (%~) SCC SCZ = Disproved (\case { })
      (%~) SCD SCA = Disproved (\case { })
      (%~) SCD SCB = Disproved (\case { })
      (%~) SCD SCC = Disproved (\case { })
      (%~) SCD SCD = Proved Refl
      (%~) SCD SCE = Disproved (\case { })
      (%~) SCD SCF = Disproved (\case { })
      (%~) SCD SCG = Disproved (\case { })
      (%~) SCD SCH = Disproved (\case { })
      (%~) SCD SCI = Disproved (\case { })
      (%~) SCD SCJ = Disproved (\case { })
      (%~) SCD SCK = Disproved (\case { })
      (%~) SCD SCL = Disproved (\case { })
      (%~) SCD SCM = Disproved (\case { })
      (%~) SCD SCN = Disproved (\case { })
      (%~) SCD SCO = Disproved (\case { })
      (%~) SCD SCP = Disproved (\case { })
      (%~) SCD SCQ = Disproved (\case { })
      (%~) SCD SCR = Disproved (\case { })
      (%~) SCD SCS = Disproved (\case { })
      (%~) SCD SCT = Disproved (\case { })
      (%~) SCD SCU = Disproved (\case { })
      (%~) SCD SCV = Disproved (\case { })
      (%~) SCD SCW = Disproved (\case { })
      (%~) SCD SCX = Disproved (\case { })
      (%~) SCD SCY = Disproved (\case { })
      (%~) SCD SCZ = Disproved (\case { })
      (%~) SCE SCA = Disproved (\case { })
      (%~) SCE SCB = Disproved (\case { })
      (%~) SCE SCC = Disproved (\case { })
      (%~) SCE SCD = Disproved (\case { })
      (%~) SCE SCE = Proved Refl
      (%~) SCE SCF = Disproved (\case { })
      (%~) SCE SCG = Disproved (\case { })
      (%~) SCE SCH = Disproved (\case { })
      (%~) SCE SCI = Disproved (\case { })
      (%~) SCE SCJ = Disproved (\case { })
      (%~) SCE SCK = Disproved (\case { })
      (%~) SCE SCL = Disproved (\case { })
      (%~) SCE SCM = Disproved (\case { })
      (%~) SCE SCN = Disproved (\case { })
      (%~) SCE SCO = Disproved (\case { })
      (%~) SCE SCP = Disproved (\case { })
      (%~) SCE SCQ = Disproved (\case { })
      (%~) SCE SCR = Disproved (\case { })
      (%~) SCE SCS = Disproved (\case { })
      (%~) SCE SCT = Disproved (\case { })
      (%~) SCE SCU = Disproved (\case { })
      (%~) SCE SCV = Disproved (\case { })
      (%~) SCE SCW = Disproved (\case { })
      (%~) SCE SCX = Disproved (\case { })
      (%~) SCE SCY = Disproved (\case { })
      (%~) SCE SCZ = Disproved (\case { })
      (%~) SCF SCA = Disproved (\case { })
      (%~) SCF SCB = Disproved (\case { })
      (%~) SCF SCC = Disproved (\case { })
      (%~) SCF SCD = Disproved (\case { })
      (%~) SCF SCE = Disproved (\case { })
      (%~) SCF SCF = Proved Refl
      (%~) SCF SCG = Disproved (\case { })
      (%~) SCF SCH = Disproved (\case { })
      (%~) SCF SCI = Disproved (\case { })
      (%~) SCF SCJ = Disproved (\case { })
      (%~) SCF SCK = Disproved (\case { })
      (%~) SCF SCL = Disproved (\case { })
      (%~) SCF SCM = Disproved (\case { })
      (%~) SCF SCN = Disproved (\case { })
      (%~) SCF SCO = Disproved (\case { })
      (%~) SCF SCP = Disproved (\case { })
      (%~) SCF SCQ = Disproved (\case { })
      (%~) SCF SCR = Disproved (\case { })
      (%~) SCF SCS = Disproved (\case { })
      (%~) SCF SCT = Disproved (\case { })
      (%~) SCF SCU = Disproved (\case { })
      (%~) SCF SCV = Disproved (\case { })
      (%~) SCF SCW = Disproved (\case { })
      (%~) SCF SCX = Disproved (\case { })
      (%~) SCF SCY = Disproved (\case { })
      (%~) SCF SCZ = Disproved (\case { })
      (%~) SCG SCA = Disproved (\case { })
      (%~) SCG SCB = Disproved (\case { })
      (%~) SCG SCC = Disproved (\case { })
      (%~) SCG SCD = Disproved (\case { })
      (%~) SCG SCE = Disproved (\case { })
      (%~) SCG SCF = Disproved (\case { })
      (%~) SCG SCG = Proved Refl
      (%~) SCG SCH = Disproved (\case { })
      (%~) SCG SCI = Disproved (\case { })
      (%~) SCG SCJ = Disproved (\case { })
      (%~) SCG SCK = Disproved (\case { })
      (%~) SCG SCL = Disproved (\case { })
      (%~) SCG SCM = Disproved (\case { })
      (%~) SCG SCN = Disproved (\case { })
      (%~) SCG SCO = Disproved (\case { })
      (%~) SCG SCP = Disproved (\case { })
      (%~) SCG SCQ = Disproved (\case { })
      (%~) SCG SCR = Disproved (\case { })
      (%~) SCG SCS = Disproved (\case { })
      (%~) SCG SCT = Disproved (\case { })
      (%~) SCG SCU = Disproved (\case { })
      (%~) SCG SCV = Disproved (\case { })
      (%~) SCG SCW = Disproved (\case { })
      (%~) SCG SCX = Disproved (\case { })
      (%~) SCG SCY = Disproved (\case { })
      (%~) SCG SCZ = Disproved (\case { })
      (%~) SCH SCA = Disproved (\case { })
      (%~) SCH SCB = Disproved (\case { })
      (%~) SCH SCC = Disproved (\case { })
      (%~) SCH SCD = Disproved (\case { })
      (%~) SCH SCE = Disproved (\case { })
      (%~) SCH SCF = Disproved (\case { })
      (%~) SCH SCG = Disproved (\case { })
      (%~) SCH SCH = Proved Refl
      (%~) SCH SCI = Disproved (\case { })
      (%~) SCH SCJ = Disproved (\case { })
      (%~) SCH SCK = Disproved (\case { })
      (%~) SCH SCL = Disproved (\case { })
      (%~) SCH SCM = Disproved (\case { })
      (%~) SCH SCN = Disproved (\case { })
      (%~) SCH SCO = Disproved (\case { })
      (%~) SCH SCP = Disproved (\case { })
      (%~) SCH SCQ = Disproved (\case { })
      (%~) SCH SCR = Disproved (\case { })
      (%~) SCH SCS = Disproved (\case { })
      (%~) SCH SCT = Disproved (\case { })
      (%~) SCH SCU = Disproved (\case { })
      (%~) SCH SCV = Disproved (\case { })
      (%~) SCH SCW = Disproved (\case { })
      (%~) SCH SCX = Disproved (\case { })
      (%~) SCH SCY = Disproved (\case { })
      (%~) SCH SCZ = Disproved (\case { })
      (%~) SCI SCA = Disproved (\case { })
      (%~) SCI SCB = Disproved (\case { })
      (%~) SCI SCC = Disproved (\case { })
      (%~) SCI SCD = Disproved (\case { })
      (%~) SCI SCE = Disproved (\case { })
      (%~) SCI SCF = Disproved (\case { })
      (%~) SCI SCG = Disproved (\case { })
      (%~) SCI SCH = Disproved (\case { })
      (%~) SCI SCI = Proved Refl
      (%~) SCI SCJ = Disproved (\case { })
      (%~) SCI SCK = Disproved (\case { })
      (%~) SCI SCL = Disproved (\case { })
      (%~) SCI SCM = Disproved (\case { })
      (%~) SCI SCN = Disproved (\case { })
      (%~) SCI SCO = Disproved (\case { })
      (%~) SCI SCP = Disproved (\case { })
      (%~) SCI SCQ = Disproved (\case { })
      (%~) SCI SCR = Disproved (\case { })
      (%~) SCI SCS = Disproved (\case { })
      (%~) SCI SCT = Disproved (\case { })
      (%~) SCI SCU = Disproved (\case { })
      (%~) SCI SCV = Disproved (\case { })
      (%~) SCI SCW = Disproved (\case { })
      (%~) SCI SCX = Disproved (\case { })
      (%~) SCI SCY = Disproved (\case { })
      (%~) SCI SCZ = Disproved (\case { })
      (%~) SCJ SCA = Disproved (\case { })
      (%~) SCJ SCB = Disproved (\case { })
      (%~) SCJ SCC = Disproved (\case { })
      (%~) SCJ SCD = Disproved (\case { })
      (%~) SCJ SCE = Disproved (\case { })
      (%~) SCJ SCF = Disproved (\case { })
      (%~) SCJ SCG = Disproved (\case { })
      (%~) SCJ SCH = Disproved (\case { })
      (%~) SCJ SCI = Disproved (\case { })
      (%~) SCJ SCJ = Proved Refl
      (%~) SCJ SCK = Disproved (\case { })
      (%~) SCJ SCL = Disproved (\case { })
      (%~) SCJ SCM = Disproved (\case { })
      (%~) SCJ SCN = Disproved (\case { })
      (%~) SCJ SCO = Disproved (\case { })
      (%~) SCJ SCP = Disproved (\case { })
      (%~) SCJ SCQ = Disproved (\case { })
      (%~) SCJ SCR = Disproved (\case { })
      (%~) SCJ SCS = Disproved (\case { })
      (%~) SCJ SCT = Disproved (\case { })
      (%~) SCJ SCU = Disproved (\case { })
      (%~) SCJ SCV = Disproved (\case { })
      (%~) SCJ SCW = Disproved (\case { })
      (%~) SCJ SCX = Disproved (\case { })
      (%~) SCJ SCY = Disproved (\case { })
      (%~) SCJ SCZ = Disproved (\case { })
      (%~) SCK SCA = Disproved (\case { })
      (%~) SCK SCB = Disproved (\case { })
      (%~) SCK SCC = Disproved (\case { })
      (%~) SCK SCD = Disproved (\case { })
      (%~) SCK SCE = Disproved (\case { })
      (%~) SCK SCF = Disproved (\case { })
      (%~) SCK SCG = Disproved (\case { })
      (%~) SCK SCH = Disproved (\case { })
      (%~) SCK SCI = Disproved (\case { })
      (%~) SCK SCJ = Disproved (\case { })
      (%~) SCK SCK = Proved Refl
      (%~) SCK SCL = Disproved (\case { })
      (%~) SCK SCM = Disproved (\case { })
      (%~) SCK SCN = Disproved (\case { })
      (%~) SCK SCO = Disproved (\case { })
      (%~) SCK SCP = Disproved (\case { })
      (%~) SCK SCQ = Disproved (\case { })
      (%~) SCK SCR = Disproved (\case { })
      (%~) SCK SCS = Disproved (\case { })
      (%~) SCK SCT = Disproved (\case { })
      (%~) SCK SCU = Disproved (\case { })
      (%~) SCK SCV = Disproved (\case { })
      (%~) SCK SCW = Disproved (\case { })
      (%~) SCK SCX = Disproved (\case { })
      (%~) SCK SCY = Disproved (\case { })
      (%~) SCK SCZ = Disproved (\case { })
      (%~) SCL SCA = Disproved (\case { })
      (%~) SCL SCB = Disproved (\case { })
      (%~) SCL SCC = Disproved (\case { })
      (%~) SCL SCD = Disproved (\case { })
      (%~) SCL SCE = Disproved (\case { })
      (%~) SCL SCF = Disproved (\case { })
      (%~) SCL SCG = Disproved (\case { })
      (%~) SCL SCH = Disproved (\case { })
      (%~) SCL SCI = Disproved (\case { })
      (%~) SCL SCJ = Disproved (\case { })
      (%~) SCL SCK = Disproved (\case { })
      (%~) SCL SCL = Proved Refl
      (%~) SCL SCM = Disproved (\case { })
      (%~) SCL SCN = Disproved (\case { })
      (%~) SCL SCO = Disproved (\case { })
      (%~) SCL SCP = Disproved (\case { })
      (%~) SCL SCQ = Disproved (\case { })
      (%~) SCL SCR = Disproved (\case { })
      (%~) SCL SCS = Disproved (\case { })
      (%~) SCL SCT = Disproved (\case { })
      (%~) SCL SCU = Disproved (\case { })
      (%~) SCL SCV = Disproved (\case { })
      (%~) SCL SCW = Disproved (\case { })
      (%~) SCL SCX = Disproved (\case { })
      (%~) SCL SCY = Disproved (\case { })
      (%~) SCL SCZ = Disproved (\case { })
      (%~) SCM SCA = Disproved (\case { })
      (%~) SCM SCB = Disproved (\case { })
      (%~) SCM SCC = Disproved (\case { })
      (%~) SCM SCD = Disproved (\case { })
      (%~) SCM SCE = Disproved (\case { })
      (%~) SCM SCF = Disproved (\case { })
      (%~) SCM SCG = Disproved (\case { })
      (%~) SCM SCH = Disproved (\case { })
      (%~) SCM SCI = Disproved (\case { })
      (%~) SCM SCJ = Disproved (\case { })
      (%~) SCM SCK = Disproved (\case { })
      (%~) SCM SCL = Disproved (\case { })
      (%~) SCM SCM = Proved Refl
      (%~) SCM SCN = Disproved (\case { })
      (%~) SCM SCO = Disproved (\case { })
      (%~) SCM SCP = Disproved (\case { })
      (%~) SCM SCQ = Disproved (\case { })
      (%~) SCM SCR = Disproved (\case { })
      (%~) SCM SCS = Disproved (\case { })
      (%~) SCM SCT = Disproved (\case { })
      (%~) SCM SCU = Disproved (\case { })
      (%~) SCM SCV = Disproved (\case { })
      (%~) SCM SCW = Disproved (\case { })
      (%~) SCM SCX = Disproved (\case { })
      (%~) SCM SCY = Disproved (\case { })
      (%~) SCM SCZ = Disproved (\case { })
      (%~) SCN SCA = Disproved (\case { })
      (%~) SCN SCB = Disproved (\case { })
      (%~) SCN SCC = Disproved (\case { })
      (%~) SCN SCD = Disproved (\case { })
      (%~) SCN SCE = Disproved (\case { })
      (%~) SCN SCF = Disproved (\case { })
      (%~) SCN SCG = Disproved (\case { })
      (%~) SCN SCH = Disproved (\case { })
      (%~) SCN SCI = Disproved (\case { })
      (%~) SCN SCJ = Disproved (\case { })
      (%~) SCN SCK = Disproved (\case { })
      (%~) SCN SCL = Disproved (\case { })
      (%~) SCN SCM = Disproved (\case { })
      (%~) SCN SCN = Proved Refl
      (%~) SCN SCO = Disproved (\case { })
      (%~) SCN SCP = Disproved (\case { })
      (%~) SCN SCQ = Disproved (\case { })
      (%~) SCN SCR = Disproved (\case { })
      (%~) SCN SCS = Disproved (\case { })
      (%~) SCN SCT = Disproved (\case { })
      (%~) SCN SCU = Disproved (\case { })
      (%~) SCN SCV = Disproved (\case { })
      (%~) SCN SCW = Disproved (\case { })
      (%~) SCN SCX = Disproved (\case { })
      (%~) SCN SCY = Disproved (\case { })
      (%~) SCN SCZ = Disproved (\case { })
      (%~) SCO SCA = Disproved (\case { })
      (%~) SCO SCB = Disproved (\case { })
      (%~) SCO SCC = Disproved (\case { })
      (%~) SCO SCD = Disproved (\case { })
      (%~) SCO SCE = Disproved (\case { })
      (%~) SCO SCF = Disproved (\case { })
      (%~) SCO SCG = Disproved (\case { })
      (%~) SCO SCH = Disproved (\case { })
      (%~) SCO SCI = Disproved (\case { })
      (%~) SCO SCJ = Disproved (\case { })
      (%~) SCO SCK = Disproved (\case { })
      (%~) SCO SCL = Disproved (\case { })
      (%~) SCO SCM = Disproved (\case { })
      (%~) SCO SCN = Disproved (\case { })
      (%~) SCO SCO = Proved Refl
      (%~) SCO SCP = Disproved (\case { })
      (%~) SCO SCQ = Disproved (\case { })
      (%~) SCO SCR = Disproved (\case { })
      (%~) SCO SCS = Disproved (\case { })
      (%~) SCO SCT = Disproved (\case { })
      (%~) SCO SCU = Disproved (\case { })
      (%~) SCO SCV = Disproved (\case { })
      (%~) SCO SCW = Disproved (\case { })
      (%~) SCO SCX = Disproved (\case { })
      (%~) SCO SCY = Disproved (\case { })
      (%~) SCO SCZ = Disproved (\case { })
      (%~) SCP SCA = Disproved (\case { })
      (%~) SCP SCB = Disproved (\case { })
      (%~) SCP SCC = Disproved (\case { })
      (%~) SCP SCD = Disproved (\case { })
      (%~) SCP SCE = Disproved (\case { })
      (%~) SCP SCF = Disproved (\case { })
      (%~) SCP SCG = Disproved (\case { })
      (%~) SCP SCH = Disproved (\case { })
      (%~) SCP SCI = Disproved (\case { })
      (%~) SCP SCJ = Disproved (\case { })
      (%~) SCP SCK = Disproved (\case { })
      (%~) SCP SCL = Disproved (\case { })
      (%~) SCP SCM = Disproved (\case { })
      (%~) SCP SCN = Disproved (\case { })
      (%~) SCP SCO = Disproved (\case { })
      (%~) SCP SCP = Proved Refl
      (%~) SCP SCQ = Disproved (\case { })
      (%~) SCP SCR = Disproved (\case { })
      (%~) SCP SCS = Disproved (\case { })
      (%~) SCP SCT = Disproved (\case { })
      (%~) SCP SCU = Disproved (\case { })
      (%~) SCP SCV = Disproved (\case { })
      (%~) SCP SCW = Disproved (\case { })
      (%~) SCP SCX = Disproved (\case { })
      (%~) SCP SCY = Disproved (\case { })
      (%~) SCP SCZ = Disproved (\case { })
      (%~) SCQ SCA = Disproved (\case { })
      (%~) SCQ SCB = Disproved (\case { })
      (%~) SCQ SCC = Disproved (\case { })
      (%~) SCQ SCD = Disproved (\case { })
      (%~) SCQ SCE = Disproved (\case { })
      (%~) SCQ SCF = Disproved (\case { })
      (%~) SCQ SCG = Disproved (\case { })
      (%~) SCQ SCH = Disproved (\case { })
      (%~) SCQ SCI = Disproved (\case { })
      (%~) SCQ SCJ = Disproved (\case { })
      (%~) SCQ SCK = Disproved (\case { })
      (%~) SCQ SCL = Disproved (\case { })
      (%~) SCQ SCM = Disproved (\case { })
      (%~) SCQ SCN = Disproved (\case { })
      (%~) SCQ SCO = Disproved (\case { })
      (%~) SCQ SCP = Disproved (\case { })
      (%~) SCQ SCQ = Proved Refl
      (%~) SCQ SCR = Disproved (\case { })
      (%~) SCQ SCS = Disproved (\case { })
      (%~) SCQ SCT = Disproved (\case { })
      (%~) SCQ SCU = Disproved (\case { })
      (%~) SCQ SCV = Disproved (\case { })
      (%~) SCQ SCW = Disproved (\case { })
      (%~) SCQ SCX = Disproved (\case { })
      (%~) SCQ SCY = Disproved (\case { })
      (%~) SCQ SCZ = Disproved (\case { })
      (%~) SCR SCA = Disproved (\case { })
      (%~) SCR SCB = Disproved (\case { })
      (%~) SCR SCC = Disproved (\case { })
      (%~) SCR SCD = Disproved (\case { })
      (%~) SCR SCE = Disproved (\case { })
      (%~) SCR SCF = Disproved (\case { })
      (%~) SCR SCG = Disproved (\case { })
      (%~) SCR SCH = Disproved (\case { })
      (%~) SCR SCI = Disproved (\case { })
      (%~) SCR SCJ = Disproved (\case { })
      (%~) SCR SCK = Disproved (\case { })
      (%~) SCR SCL = Disproved (\case { })
      (%~) SCR SCM = Disproved (\case { })
      (%~) SCR SCN = Disproved (\case { })
      (%~) SCR SCO = Disproved (\case { })
      (%~) SCR SCP = Disproved (\case { })
      (%~) SCR SCQ = Disproved (\case { })
      (%~) SCR SCR = Proved Refl
      (%~) SCR SCS = Disproved (\case { })
      (%~) SCR SCT = Disproved (\case { })
      (%~) SCR SCU = Disproved (\case { })
      (%~) SCR SCV = Disproved (\case { })
      (%~) SCR SCW = Disproved (\case { })
      (%~) SCR SCX = Disproved (\case { })
      (%~) SCR SCY = Disproved (\case { })
      (%~) SCR SCZ = Disproved (\case { })
      (%~) SCS SCA = Disproved (\case { })
      (%~) SCS SCB = Disproved (\case { })
      (%~) SCS SCC = Disproved (\case { })
      (%~) SCS SCD = Disproved (\case { })
      (%~) SCS SCE = Disproved (\case { })
      (%~) SCS SCF = Disproved (\case { })
      (%~) SCS SCG = Disproved (\case { })
      (%~) SCS SCH = Disproved (\case { })
      (%~) SCS SCI = Disproved (\case { })
      (%~) SCS SCJ = Disproved (\case { })
      (%~) SCS SCK = Disproved (\case { })
      (%~) SCS SCL = Disproved (\case { })
      (%~) SCS SCM = Disproved (\case { })
      (%~) SCS SCN = Disproved (\case { })
      (%~) SCS SCO = Disproved (\case { })
      (%~) SCS SCP = Disproved (\case { })
      (%~) SCS SCQ = Disproved (\case { })
      (%~) SCS SCR = Disproved (\case { })
      (%~) SCS SCS = Proved Refl
      (%~) SCS SCT = Disproved (\case { })
      (%~) SCS SCU = Disproved (\case { })
      (%~) SCS SCV = Disproved (\case { })
      (%~) SCS SCW = Disproved (\case { })
      (%~) SCS SCX = Disproved (\case { })
      (%~) SCS SCY = Disproved (\case { })
      (%~) SCS SCZ = Disproved (\case { })
      (%~) SCT SCA = Disproved (\case { })
      (%~) SCT SCB = Disproved (\case { })
      (%~) SCT SCC = Disproved (\case { })
      (%~) SCT SCD = Disproved (\case { })
      (%~) SCT SCE = Disproved (\case { })
      (%~) SCT SCF = Disproved (\case { })
      (%~) SCT SCG = Disproved (\case { })
      (%~) SCT SCH = Disproved (\case { })
      (%~) SCT SCI = Disproved (\case { })
      (%~) SCT SCJ = Disproved (\case { })
      (%~) SCT SCK = Disproved (\case { })
      (%~) SCT SCL = Disproved (\case { })
      (%~) SCT SCM = Disproved (\case { })
      (%~) SCT SCN = Disproved (\case { })
      (%~) SCT SCO = Disproved (\case { })
      (%~) SCT SCP = Disproved (\case { })
      (%~) SCT SCQ = Disproved (\case { })
      (%~) SCT SCR = Disproved (\case { })
      (%~) SCT SCS = Disproved (\case { })
      (%~) SCT SCT = Proved Refl
      (%~) SCT SCU = Disproved (\case { })
      (%~) SCT SCV = Disproved (\case { })
      (%~) SCT SCW = Disproved (\case { })
      (%~) SCT SCX = Disproved (\case { })
      (%~) SCT SCY = Disproved (\case { })
      (%~) SCT SCZ = Disproved (\case { })
      (%~) SCU SCA = Disproved (\case { })
      (%~) SCU SCB = Disproved (\case { })
      (%~) SCU SCC = Disproved (\case { })
      (%~) SCU SCD = Disproved (\case { })
      (%~) SCU SCE = Disproved (\case { })
      (%~) SCU SCF = Disproved (\case { })
      (%~) SCU SCG = Disproved (\case { })
      (%~) SCU SCH = Disproved (\case { })
      (%~) SCU SCI = Disproved (\case { })
      (%~) SCU SCJ = Disproved (\case { })
      (%~) SCU SCK = Disproved (\case { })
      (%~) SCU SCL = Disproved (\case { })
      (%~) SCU SCM = Disproved (\case { })
      (%~) SCU SCN = Disproved (\case { })
      (%~) SCU SCO = Disproved (\case { })
      (%~) SCU SCP = Disproved (\case { })
      (%~) SCU SCQ = Disproved (\case { })
      (%~) SCU SCR = Disproved (\case { })
      (%~) SCU SCS = Disproved (\case { })
      (%~) SCU SCT = Disproved (\case { })
      (%~) SCU SCU = Proved Refl
      (%~) SCU SCV = Disproved (\case { })
      (%~) SCU SCW = Disproved (\case { })
      (%~) SCU SCX = Disproved (\case { })
      (%~) SCU SCY = Disproved (\case { })
      (%~) SCU SCZ = Disproved (\case { })
      (%~) SCV SCA = Disproved (\case { })
      (%~) SCV SCB = Disproved (\case { })
      (%~) SCV SCC = Disproved (\case { })
      (%~) SCV SCD = Disproved (\case { })
      (%~) SCV SCE = Disproved (\case { })
      (%~) SCV SCF = Disproved (\case { })
      (%~) SCV SCG = Disproved (\case { })
      (%~) SCV SCH = Disproved (\case { })
      (%~) SCV SCI = Disproved (\case { })
      (%~) SCV SCJ = Disproved (\case { })
      (%~) SCV SCK = Disproved (\case { })
      (%~) SCV SCL = Disproved (\case { })
      (%~) SCV SCM = Disproved (\case { })
      (%~) SCV SCN = Disproved (\case { })
      (%~) SCV SCO = Disproved (\case { })
      (%~) SCV SCP = Disproved (\case { })
      (%~) SCV SCQ = Disproved (\case { })
      (%~) SCV SCR = Disproved (\case { })
      (%~) SCV SCS = Disproved (\case { })
      (%~) SCV SCT = Disproved (\case { })
      (%~) SCV SCU = Disproved (\case { })
      (%~) SCV SCV = Proved Refl
      (%~) SCV SCW = Disproved (\case { })
      (%~) SCV SCX = Disproved (\case { })
      (%~) SCV SCY = Disproved (\case { })
      (%~) SCV SCZ = Disproved (\case { })
      (%~) SCW SCA = Disproved (\case { })
      (%~) SCW SCB = Disproved (\case { })
      (%~) SCW SCC = Disproved (\case { })
      (%~) SCW SCD = Disproved (\case { })
      (%~) SCW SCE = Disproved (\case { })
      (%~) SCW SCF = Disproved (\case { })
      (%~) SCW SCG = Disproved (\case { })
      (%~) SCW SCH = Disproved (\case { })
      (%~) SCW SCI = Disproved (\case { })
      (%~) SCW SCJ = Disproved (\case { })
      (%~) SCW SCK = Disproved (\case { })
      (%~) SCW SCL = Disproved (\case { })
      (%~) SCW SCM = Disproved (\case { })
      (%~) SCW SCN = Disproved (\case { })
      (%~) SCW SCO = Disproved (\case { })
      (%~) SCW SCP = Disproved (\case { })
      (%~) SCW SCQ = Disproved (\case { })
      (%~) SCW SCR = Disproved (\case { })
      (%~) SCW SCS = Disproved (\case { })
      (%~) SCW SCT = Disproved (\case { })
      (%~) SCW SCU = Disproved (\case { })
      (%~) SCW SCV = Disproved (\case { })
      (%~) SCW SCW = Proved Refl
      (%~) SCW SCX = Disproved (\case { })
      (%~) SCW SCY = Disproved (\case { })
      (%~) SCW SCZ = Disproved (\case { })
      (%~) SCX SCA = Disproved (\case { })
      (%~) SCX SCB = Disproved (\case { })
      (%~) SCX SCC = Disproved (\case { })
      (%~) SCX SCD = Disproved (\case { })
      (%~) SCX SCE = Disproved (\case { })
      (%~) SCX SCF = Disproved (\case { })
      (%~) SCX SCG = Disproved (\case { })
      (%~) SCX SCH = Disproved (\case { })
      (%~) SCX SCI = Disproved (\case { })
      (%~) SCX SCJ = Disproved (\case { })
      (%~) SCX SCK = Disproved (\case { })
      (%~) SCX SCL = Disproved (\case { })
      (%~) SCX SCM = Disproved (\case { })
      (%~) SCX SCN = Disproved (\case { })
      (%~) SCX SCO = Disproved (\case { })
      (%~) SCX SCP = Disproved (\case { })
      (%~) SCX SCQ = Disproved (\case { })
      (%~) SCX SCR = Disproved (\case { })
      (%~) SCX SCS = Disproved (\case { })
      (%~) SCX SCT = Disproved (\case { })
      (%~) SCX SCU = Disproved (\case { })
      (%~) SCX SCV = Disproved (\case { })
      (%~) SCX SCW = Disproved (\case { })
      (%~) SCX SCX = Proved Refl
      (%~) SCX SCY = Disproved (\case { })
      (%~) SCX SCZ = Disproved (\case { })
      (%~) SCY SCA = Disproved (\case { })
      (%~) SCY SCB = Disproved (\case { })
      (%~) SCY SCC = Disproved (\case { })
      (%~) SCY SCD = Disproved (\case { })
      (%~) SCY SCE = Disproved (\case { })
      (%~) SCY SCF = Disproved (\case { })
      (%~) SCY SCG = Disproved (\case { })
      (%~) SCY SCH = Disproved (\case { })
      (%~) SCY SCI = Disproved (\case { })
      (%~) SCY SCJ = Disproved (\case { })
      (%~) SCY SCK = Disproved (\case { })
      (%~) SCY SCL = Disproved (\case { })
      (%~) SCY SCM = Disproved (\case { })
      (%~) SCY SCN = Disproved (\case { })
      (%~) SCY SCO = Disproved (\case { })
      (%~) SCY SCP = Disproved (\case { })
      (%~) SCY SCQ = Disproved (\case { })
      (%~) SCY SCR = Disproved (\case { })
      (%~) SCY SCS = Disproved (\case { })
      (%~) SCY SCT = Disproved (\case { })
      (%~) SCY SCU = Disproved (\case { })
      (%~) SCY SCV = Disproved (\case { })
      (%~) SCY SCW = Disproved (\case { })
      (%~) SCY SCX = Disproved (\case { })
      (%~) SCY SCY = Proved Refl
      (%~) SCY SCZ = Disproved (\case { })
      (%~) SCZ SCA = Disproved (\case { })
      (%~) SCZ SCB = Disproved (\case { })
      (%~) SCZ SCC = Disproved (\case { })
      (%~) SCZ SCD = Disproved (\case { })
      (%~) SCZ SCE = Disproved (\case { })
      (%~) SCZ SCF = Disproved (\case { })
      (%~) SCZ SCG = Disproved (\case { })
      (%~) SCZ SCH = Disproved (\case { })
      (%~) SCZ SCI = Disproved (\case { })
      (%~) SCZ SCJ = Disproved (\case { })
      (%~) SCZ SCK = Disproved (\case { })
      (%~) SCZ SCL = Disproved (\case { })
      (%~) SCZ SCM = Disproved (\case { })
      (%~) SCZ SCN = Disproved (\case { })
      (%~) SCZ SCO = Disproved (\case { })
      (%~) SCZ SCP = Disproved (\case { })
      (%~) SCZ SCQ = Disproved (\case { })
      (%~) SCZ SCR = Disproved (\case { })
      (%~) SCZ SCS = Disproved (\case { })
      (%~) SCZ SCT = Disproved (\case { })
      (%~) SCZ SCU = Disproved (\case { })
      (%~) SCZ SCV = Disproved (\case { })
      (%~) SCZ SCW = Disproved (\case { })
      (%~) SCZ SCX = Disproved (\case { })
      (%~) SCZ SCY = Disproved (\case { })
      (%~) SCZ SCZ = Proved Refl
    instance SingI CA where
      sing = SCA
    instance SingI CB where
      sing = SCB
    instance SingI CC where
      sing = SCC
    instance SingI CD where
      sing = SCD
    instance SingI CE where
      sing = SCE
    instance SingI CF where
      sing = SCF
    instance SingI CG where
      sing = SCG
    instance SingI CH where
      sing = SCH
    instance SingI CI where
      sing = SCI
    instance SingI CJ where
      sing = SCJ
    instance SingI CK where
      sing = SCK
    instance SingI CL where
      sing = SCL
    instance SingI CM where
      sing = SCM
    instance SingI CN where
      sing = SCN
    instance SingI CO where
      sing = SCO
    instance SingI CP where
      sing = SCP
    instance SingI CQ where
      sing = SCQ
    instance SingI CR where
      sing = SCR
    instance SingI CS where
      sing = SCS
    instance SingI CT where
      sing = SCT
    instance SingI CU where
      sing = SCU
    instance SingI CV where
      sing = SCV
    instance SingI CW where
      sing = SCW
    instance SingI CX where
      sing = SCX
    instance SingI CY where
      sing = SCY
    instance SingI CZ where
      sing = SCZ
    data instance Sing (z :: Attribute)
      = forall (n :: [AChar]) (n :: U). z ~ Attr n n =>
        SAttr (Sing n) (Sing n)
    type SAttribute (z :: Attribute) = Sing z
    instance SingKind (KProxy :: KProxy Attribute) where
      type DemoteRep (KProxy :: KProxy Attribute) = Attribute
      fromSing (SAttr b b) = Attr (fromSing b) (fromSing b)
      toSing (Attr b b)
        = case
              (toSing b :: SomeSing (KProxy :: KProxy [AChar]),
               toSing b :: SomeSing (KProxy :: KProxy U))
          of {
            (SomeSing c, SomeSing c) -> SomeSing (SAttr c c) }
    instance (SingI n, SingI n) =>
             SingI (Attr (n :: [AChar]) (n :: U)) where
      sing = SAttr sing sing
    data instance Sing (z :: Schema)
      = forall (n :: [Attribute]). z ~ Sch n => SSch (Sing n)
    type SSchema (z :: Schema) = Sing z
    instance SingKind (KProxy :: KProxy Schema) where
      type DemoteRep (KProxy :: KProxy Schema) = Schema
      fromSing (SSch b) = Sch (fromSing b)
      toSing (Sch b)
        = case toSing b :: SomeSing (KProxy :: KProxy [Attribute]) of {
            SomeSing c -> SomeSing (SSch c) }
    instance SingI n => SingI (Sch (n :: [Attribute])) where
      sing = SSch sing
    sAppend ::
      forall (t :: Schema) (t :: Schema).
      Sing t -> Sing t -> Sing (Append t t)
    sAppend (SSch s1) (SSch s2) = SSch ((%:++) s1 s2)
    sAttrNotIn ::
      forall (t :: Attribute) (t :: Schema).
      Sing t -> Sing t -> Sing (AttrNotIn t t)
    sAttrNotIn _ (SSch SNil) = STrue
    sAttrNotIn (SAttr name u) (SSch (SCons (SAttr name' _) t))
      = (%:&&) ((%:/=) name name') (sAttrNotIn (SAttr name u) (SSch t))
    sDisjoint ::
      forall (t :: Schema) (t :: Schema).
      Sing t -> Sing t -> Sing (Disjoint t t)
    sDisjoint (SSch SNil) _ = STrue
    sDisjoint (SSch (SCons h t)) s
      = (%:&&) (sAttrNotIn h s) (sDisjoint (SSch t) s)
    sOccurs ::
      forall (t :: [AChar]) (t :: Schema).
      Sing t -> Sing t -> Sing (Occurs t t)
    sOccurs _ (SSch SNil) = SFalse
    sOccurs name (SSch (SCons (SAttr name' _) attrs))
      = (%:||) ((%:==) name name') (sOccurs name (SSch attrs))
    sLookup ::
      forall (t :: [AChar]) (t :: Schema).
      Sing t -> Sing t -> Sing (Lookup t t)
    sLookup _ (SSch SNil) = undefined
    sLookup name (SSch (SCons (SAttr name' u) attrs))
      = sIf ((%:==) name name') u (sLookup name (SSch attrs))
GradingClient/Database.hs:0:0: Splicing declarations
    return [] ======> GradingClient/Database.hs:0:0:
GradingClient/Database.hs:(0,0)-(0,0): Splicing expression
    cases ''Row [| r |] [| changeId (n ++ (getId r)) r |]
  ======>
    case r of {
      EmptyRow _ -> changeId (n ++ (getId r)) r
      ConsRow _ _ -> changeId (n ++ (getId r)) r }
