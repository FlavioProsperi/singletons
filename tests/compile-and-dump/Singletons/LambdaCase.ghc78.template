Promote/LambdaCase.hs:0:0: Splicing declarations
    promote
      [d| foo1 :: a -> Maybe a -> a
          foo1 d x
            = (\case {
                 Just y -> y
                 Nothing -> d })
                x
          foo2 :: a -> Maybe a -> a
          foo2 d _
            = (\case {
                 Just y -> y
                 Nothing -> d })
                (Just d)
          foo3 :: a -> b -> a
          foo3 a b = (\case { (p, _) -> p }) (a, b) |]
  ======>
    Promote/LambdaCase.hs:(0,0)-(0,0)
    foo1 :: forall a. a -> Maybe a -> a
    foo1 d x
      = \case {
          Just y -> y
          Nothing -> d }
          x
    foo2 :: forall a. a -> Maybe a -> a
    foo2 d _
      = \case {
          Just y -> y
          Nothing -> d }
          (Just d)
    foo3 :: forall a b. a -> b -> a
    foo3 a b = \case { (p, _) -> p } (a, b)
    type Foo3Sym2 t t = Foo3 t t
    data Foo3Sym1 (l :: a) (l :: TyFun b a)
    type instance Apply (Foo3Sym1 l) l = Foo3Sym2 l l
    data Foo3Sym0 (l :: TyFun a (TyFun b a -> *))
    type instance Apply Foo3Sym0 l = Foo3Sym1 l
    type family Case_0123456789 a b x t where
      Case_0123456789 a b x (GHC.Tuple.(,) p z) = p
    type family Lambda_0123456789 a b t where
      Lambda_0123456789 a b x = Case_0123456789 a b x x
    type Lambda_0123456789Sym3 t t t = Lambda_0123456789 t t t
    data Lambda_0123456789Sym2 (l :: k) (l :: k) (l :: TyFun k r)
    type instance Apply (Lambda_0123456789Sym2 l l) l = Lambda_0123456789Sym3 l l l
    data Lambda_0123456789Sym1 (l :: k) (l :: TyFun k (TyFun k r -> *))
    type instance Apply (Lambda_0123456789Sym1 l) l = Lambda_0123456789Sym2 l l
    data Lambda_0123456789Sym0 (l :: TyFun k (TyFun k (TyFun k r -> *)
                                              -> *))
    type instance Apply Lambda_0123456789Sym0 l = Lambda_0123456789Sym1 l
    type Foo2Sym2 t t = Foo2 t t
    data Foo2Sym1 (l :: a) (l :: TyFun (Maybe a) a)
    type instance Apply (Foo2Sym1 l) l = Foo2Sym2 l l
    data Foo2Sym0 (l :: TyFun a (TyFun (Maybe a) a -> *))
    type instance Apply Foo2Sym0 l = Foo2Sym1 l
    type family Case_0123456789 d x t where
      Case_0123456789 d x (Just y) = y
      Case_0123456789 d x Nothing = d
    type family Lambda_0123456789 d t where
      Lambda_0123456789 d x = Case_0123456789 d x x
    type Lambda_0123456789Sym2 t t = Lambda_0123456789 t t
    data Lambda_0123456789Sym1 (l :: k) (l :: TyFun k r)
    type instance Apply (Lambda_0123456789Sym1 l) l = Lambda_0123456789Sym2 l l
    data Lambda_0123456789Sym0 (l :: TyFun k (TyFun k r -> *))
    type instance Apply Lambda_0123456789Sym0 l = Lambda_0123456789Sym1 l
    type Foo1Sym2 t t = Foo1 t t
    data Foo1Sym1 (l :: a) (l :: TyFun (Maybe a) a)
    type instance Apply (Foo1Sym1 l) l = Foo1Sym2 l l
    data Foo1Sym0 (l :: TyFun a (TyFun (Maybe a) a -> *))
    type instance Apply Foo1Sym0 l = Foo1Sym1 l
    type family Case_0123456789 d x x t where
      Case_0123456789 d x x (Just y) = y
      Case_0123456789 d x x Nothing = d
    type family Lambda_0123456789 d x t where
      Lambda_0123456789 d x x = Case_0123456789 d x x x
    type Lambda_0123456789Sym3 t t t = Lambda_0123456789 t t t
    data Lambda_0123456789Sym2 (l :: k) (l :: k) (l :: TyFun k r)
    type instance Apply (Lambda_0123456789Sym2 l l) l = Lambda_0123456789Sym3 l l l
    data Lambda_0123456789Sym1 (l :: k) (l :: TyFun k (TyFun k r -> *))
    type instance Apply (Lambda_0123456789Sym1 l) l = Lambda_0123456789Sym2 l l
    data Lambda_0123456789Sym0 (l :: TyFun k (TyFun k (TyFun k r -> *)
                                              -> *))
    type instance Apply Lambda_0123456789Sym0 l = Lambda_0123456789Sym1 l
    type family Foo3 (a :: a) (a :: b) :: a where
      Foo3 a b = Apply (Apply (Apply Lambda_0123456789Sym0 a) b) (Apply (Apply Tuple2Sym0 a) b)
    type family Foo2 (a :: a) (a :: Maybe a) :: a where
      Foo2 d z = Apply (Apply Lambda_0123456789Sym0 d) (Apply JustSym0 d)
    type family Foo1 (a :: a) (a :: Maybe a) :: a where
      Foo1 d x = Apply (Apply (Apply Lambda_0123456789Sym0 d) x) x
