Singletons/HigherOrder.hs:0:0: Splicing declarations
    singletons
      [d| map :: (a -> b) -> [a] -> [b]
          map _ [] = []
          map f (h : t) = (f h) : (map f t)
          liftMaybe :: (a -> b) -> Maybe a -> Maybe b
          liftMaybe f (Just x) = Just (f x)
          liftMaybe _ Nothing = Nothing |]
  ======>
    Singletons/HigherOrder.hs:(0,0)-(0,0)
    map :: forall a b. (a -> b) -> [a] -> [b]
    map _ GHC.Types.[] = []
    map f (h GHC.Types.: t) = ((f h) GHC.Types.: (map f t))
    liftMaybe :: forall a b. (a -> b) -> Maybe a -> Maybe b
    liftMaybe f (Just x) = Just (f x)
    liftMaybe _ Nothing = Nothing
    type family Map (a :: TyFun a b -> *) (a :: [a]) :: [b] where
         Map z GHC.Types.[] = '[]
         Map f ((GHC.Types.:) h t) = (GHC.Types.:) (Apply f h) (Map f t)
    data MapSym1 (a :: TyFun a b -> *) (a :: TyFun [a] [b])
    data MapSym0 (a :: TyFun (TyFun a b -> *) (TyFun [a] [b] -> *))
    type instance Apply (MapSym1 a) a = Map a a
    type instance Apply MapSym0 a = MapSym1 a
    type family LiftMaybe (a :: TyFun a b -> *)
                          (a :: Maybe a) :: Maybe b where
         LiftMaybe f (Just x) = Just (Apply f x)
         LiftMaybe z Nothing = Nothing
    data LiftMaybeSym1 (a :: TyFun a b -> *)
                       (a :: TyFun (Maybe a) (Maybe b))
    data LiftMaybeSym0 (a :: TyFun (TyFun a b
                                    -> *) (TyFun (Maybe a) (Maybe b) -> *))
    type instance Apply (LiftMaybeSym1 a) a = LiftMaybe a a
    type instance Apply LiftMaybeSym0 a = LiftMaybeSym1 a
    sMap ::
      forall (t :: TyFun a b -> *) (t :: [a]).
      (forall (t :: a). Proxy t -> Sing t -> Sing (Apply t t))
      -> Sing t -> Sing (Map t t)
    sMap _ SNil = SNil
    sMap f (SCons h t) = SCons (f Proxy h) (sMap f t)
    sLiftMaybe ::
      forall (t :: TyFun a b -> *) (t :: Maybe a).
      (forall (t :: a). Proxy t -> Sing t -> Sing (Apply t t))
      -> Sing t -> Sing (LiftMaybe t t)
    sLiftMaybe f (SJust x) = SJust (f Proxy x)
    sLiftMaybe _ SNothing = SNothing
