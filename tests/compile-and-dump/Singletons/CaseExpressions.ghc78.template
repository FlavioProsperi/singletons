Promote/CaseExpressions.hs:0:0: Splicing declarations
    promote
      [d| foo1 :: a -> Maybe a -> a
          foo1 d x
            = case x of {
                Just y -> y
                Nothing -> d }
          foo2 :: a -> Maybe a -> a
          foo2 d _
            = case (Just d) of {
                Just y -> y
                Nothing -> d }
          foo3 :: a -> b -> a
          foo3 a b = case (a, b) of { (p, _) -> p }
          foo4 :: forall a. a -> a
          foo4 x
            = case x of {
                y -> let
                       z :: a
                       z = y
                     in z }
          foo5 :: a -> a
          foo5 x = case x of { y -> (\ _ -> x) y } |]
  ======>
    Promote/CaseExpressions.hs:(0,0)-(0,0)
    foo1 :: forall a. a -> Maybe a -> a
    foo1 d x
      = case x of {
          Just y -> y
          Nothing -> d }
    foo2 :: forall a. a -> Maybe a -> a
    foo2 d _
      = case Just d of {
          Just y -> y
          Nothing -> d }
    foo3 :: forall a b. a -> b -> a
    foo3 a b = case (a, b) of { (p, _) -> p }
    foo4 :: forall a. a -> a
    foo4 x
      = case x of {
          y -> let
                 z :: a
                 z = y
               in z }
    foo5 :: forall a. a -> a
    foo5 x = case x of { y -> \ _ -> x y }
    type Foo5Sym1 t = Foo5 t
    data Foo5Sym0 (l :: TyFun a a)
    type instance Apply Foo5Sym0 l = Foo5Sym1 l
    type Let_0123456789ScrutineeSym1 t = Let_0123456789Scrutinee t
    data Let_0123456789ScrutineeSym0 (l :: TyFun k kresult)
    type instance Apply Let_0123456789ScrutineeSym0 l = Let_0123456789ScrutineeSym1 l
    type Let_0123456789Scrutinee x = x
    type family Case_0123456789 x y arg t where
      Case_0123456789 x y arg z = x
    type family Lambda_0123456789 x y t where
      Lambda_0123456789 x y arg = Case_0123456789 x y arg arg
    type Lambda_0123456789Sym3 t t t = Lambda_0123456789 t t t
    data Lambda_0123456789Sym2 (l :: k) (l :: k) (l :: TyFun k r)
    type instance Apply (Lambda_0123456789Sym2 l l) l = Lambda_0123456789Sym3 l l l
    data Lambda_0123456789Sym1 (l :: k) (l :: TyFun k (TyFun k r -> *))
    type instance Apply (Lambda_0123456789Sym1 l) l = Lambda_0123456789Sym2 l l
    data Lambda_0123456789Sym0 (l :: TyFun k (TyFun k (TyFun k r -> *)
                                              -> *))
    type instance Apply Lambda_0123456789Sym0 l = Lambda_0123456789Sym1 l
    type family Case_0123456789 x t where
      Case_0123456789 x y = Apply (Apply (Apply Lambda_0123456789Sym0 x) y) y
    type Foo4Sym1 t = Foo4 t
    data Foo4Sym0 (l :: TyFun a a)
    type instance Apply Foo4Sym0 l = Foo4Sym1 l
    type Let_0123456789ScrutineeSym1 t = Let_0123456789Scrutinee t
    data Let_0123456789ScrutineeSym0 (l :: TyFun k kresult)
    type instance Apply Let_0123456789ScrutineeSym0 l = Let_0123456789ScrutineeSym1 l
    type Let_0123456789Scrutinee x = x
    type Let_0123456789ZSym2 t t = Let_0123456789Z t t
    data Let_0123456789ZSym1 (l :: k) (l :: TyFun k a)
    type instance Apply (Let_0123456789ZSym1 l) l = Let_0123456789ZSym2 l l
    data Let_0123456789ZSym0 (l :: TyFun k (TyFun k a -> *))
    type instance Apply Let_0123456789ZSym0 l = Let_0123456789ZSym1 l
    type Let_0123456789Z x y = (y :: a)
    type family Case_0123456789 x t where
      Case_0123456789 x y = Let_0123456789ZSym2 x y
    type Foo3Sym2 t t = Foo3 t t
    data Foo3Sym1 (l :: a) (l :: TyFun b a)
    type instance Apply (Foo3Sym1 l) l = Foo3Sym2 l l
    data Foo3Sym0 (l :: TyFun a (TyFun b a -> *))
    type instance Apply Foo3Sym0 l = Foo3Sym1 l
    type Let_0123456789ScrutineeSym2 t t = Let_0123456789Scrutinee t t
    data Let_0123456789ScrutineeSym1 (l :: k) (l :: TyFun k kresult)
    type instance Apply (Let_0123456789ScrutineeSym1 l) l = Let_0123456789ScrutineeSym2 l l
    data Let_0123456789ScrutineeSym0 (l :: TyFun k (TyFun k kresult
                                                    -> *))
    type instance Apply Let_0123456789ScrutineeSym0 l = Let_0123456789ScrutineeSym1 l
    type Let_0123456789Scrutinee a b = Apply (Apply Tuple2Sym0 a) b
    type family Case_0123456789 a b t where
      Case_0123456789 a b (GHC.Tuple.(,) p z) = p
    type Foo2Sym2 t t = Foo2 t t
    data Foo2Sym1 (l :: a) (l :: TyFun (Maybe a) a)
    type instance Apply (Foo2Sym1 l) l = Foo2Sym2 l l
    data Foo2Sym0 (l :: TyFun a (TyFun (Maybe a) a -> *))
    type instance Apply Foo2Sym0 l = Foo2Sym1 l
    type Let_0123456789ScrutineeSym1 t = Let_0123456789Scrutinee t
    data Let_0123456789ScrutineeSym0 (l :: TyFun k kresult)
    type instance Apply Let_0123456789ScrutineeSym0 l = Let_0123456789ScrutineeSym1 l
    type Let_0123456789Scrutinee d = Apply JustSym0 d
    type family Case_0123456789 d t where
      Case_0123456789 d (Just y) = y
      Case_0123456789 d Nothing = d
    type Foo1Sym2 t t = Foo1 t t
    data Foo1Sym1 (l :: a) (l :: TyFun (Maybe a) a)
    type instance Apply (Foo1Sym1 l) l = Foo1Sym2 l l
    data Foo1Sym0 (l :: TyFun a (TyFun (Maybe a) a -> *))
    type instance Apply Foo1Sym0 l = Foo1Sym1 l
    type Let_0123456789ScrutineeSym2 t t = Let_0123456789Scrutinee t t
    data Let_0123456789ScrutineeSym1 (l :: k) (l :: TyFun k kresult)
    type instance Apply (Let_0123456789ScrutineeSym1 l) l = Let_0123456789ScrutineeSym2 l l
    data Let_0123456789ScrutineeSym0 (l :: TyFun k (TyFun k kresult
                                                    -> *))
    type instance Apply Let_0123456789ScrutineeSym0 l = Let_0123456789ScrutineeSym1 l
    type Let_0123456789Scrutinee d x = x
    type family Case_0123456789 d x t where
      Case_0123456789 d x (Just y) = y
      Case_0123456789 d x Nothing = d
    type family Foo5 (a :: a) :: a where
      Foo5 x = Case_0123456789 x (Let_0123456789ScrutineeSym1 x)
    type family Foo4 (a :: a) :: a where
      Foo4 x = Case_0123456789 x (Let_0123456789ScrutineeSym1 x)
    type family Foo3 (a :: a) (a :: b) :: a where
      Foo3 a b = Case_0123456789 a b (Let_0123456789ScrutineeSym2 a b)
    type family Foo2 (a :: a) (a :: Maybe a) :: a where
      Foo2 d z = Case_0123456789 d (Let_0123456789ScrutineeSym1 d)
    type family Foo1 (a :: a) (a :: Maybe a) :: a where
      Foo1 d x = Case_0123456789 d x (Let_0123456789ScrutineeSym2 d x)
