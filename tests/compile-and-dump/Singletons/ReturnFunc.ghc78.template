Singletons/ReturnFunc.hs:0:0: Splicing declarations
    singletons
      [d| returnFunc :: Nat -> Nat -> Nat
          returnFunc _ = Succ
          id :: a -> a
          id x = x
          idFoo :: c -> a -> a
          idFoo _ = id |]
  ======>
    Singletons/ReturnFunc.hs:(0,0)-(0,0)
    returnFunc :: Nat -> Nat -> Nat
    returnFunc _ = Succ
    id :: forall a. a -> a
    id x = x
    idFoo :: forall c a. c -> a -> a
    idFoo _ = id
    type IdSym1 (t :: a) = Id t
    instance SuppressUnusedWarnings IdSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) IdSym0KindInference GHC.Tuple.())
    data IdSym0 (l :: TyFun a a)
      = forall arg. (GHC.Types.~) (Apply IdSym0 arg) (IdSym1 arg) =>
        IdSym0KindInference (Proxy arg)
    type instance Apply IdSym0 l = IdSym1 l
    type IdFooSym1 (t :: c) = IdFoo t
    instance SuppressUnusedWarnings IdFooSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) IdFooSym0KindInference GHC.Tuple.())
    data IdFooSym0 (l :: TyFun c (TyFun a a -> *))
      = forall arg. (GHC.Types.~) (Apply IdFooSym0 arg) (IdFooSym1 arg) =>
        IdFooSym0KindInference (Proxy arg)
    type instance Apply IdFooSym0 l = IdFooSym1 l
    type ReturnFuncSym1 (t :: Nat) = ReturnFunc t
    instance SuppressUnusedWarnings ReturnFuncSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) ReturnFuncSym0KindInference GHC.Tuple.())
    data ReturnFuncSym0 (l :: TyFun Nat (TyFun Nat Nat -> *))
      = forall arg. (GHC.Types.~) (Apply ReturnFuncSym0 arg) (ReturnFuncSym1 arg) =>
        ReturnFuncSym0KindInference (Proxy arg)
    type instance Apply ReturnFuncSym0 l = ReturnFuncSym1 l
    type family Id (a :: a) :: a where
      Id x = x
    type family IdFoo (a :: c) :: TyFun a a -> * where
      IdFoo z = IdSym0
    type family ReturnFunc (a :: Nat) :: TyFun Nat Nat -> * where
      ReturnFunc z = SuccSym0
    sId :: forall (t :: a). Sing t -> Sing (Apply IdSym0 t)
    sIdFoo ::
      forall (t :: c) (t :: a).
      Sing t -> Sing t -> Sing (Apply (Apply IdFooSym0 t) t)
    sReturnFunc ::
      forall (t :: Nat) (t :: Nat).
      Sing t -> Sing t -> Sing (Apply (Apply ReturnFuncSym0 t) t)
    sId sX
      = let
          lambda ::
            forall x. (GHC.Types.~) t x => Sing x -> Sing (Apply IdSym0 x)
          lambda x = x
        in lambda sX
    sIdFoo _
      = unSingFun1
          (Proxy :: Proxy (Apply IdFooSym0 t))
          (let
             lambda ::
               forall wild. (GHC.Types.~) t wild => Sing (Apply IdFooSym0 wild)
             lambda = singFun1 (Proxy :: Proxy IdSym0) sId
           in lambda)
    sReturnFunc _
      = unSingFun1
          (Proxy :: Proxy (Apply ReturnFuncSym0 t))
          (let
             lambda ::
               forall wild. (GHC.Types.~) t wild =>
               Sing (Apply ReturnFuncSym0 wild)
             lambda = singFun1 (Proxy :: Proxy SuccSym0) SSucc
           in lambda)
