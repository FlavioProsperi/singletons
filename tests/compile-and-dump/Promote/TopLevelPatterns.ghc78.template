Promote/TopLevelPatterns.hs:0:0: Splicing declarations
    promote
      [d| data Bool = False | True
          data Foo = Bar Bool Bool |]
  ======>
    Promote/TopLevelPatterns.hs:(0,0)-(0,0)
    data Bool = False | True
    data Foo = Bar Bool Bool
    type FalseSym0 = False
    type TrueSym0 = True
    type BarSym2 t t = Bar t t
    data BarSym1 (l :: Bool) (l :: TyFun Bool Foo)
    type instance Apply (BarSym1 l) l = BarSym2 l l
    data BarSym0 (l :: TyFun Bool (TyFun Bool Foo -> *))
    type instance Apply BarSym0 l = BarSym1 l
Promote/TopLevelPatterns.hs:0:0: Splicing declarations
    promote
      [d| otherwise :: Bool
          otherwise = True
          id :: a -> a
          id x = x
          not :: Bool -> Bool
          not True = False
          not False = True
          false_ = False
          f, g :: Bool -> Bool
          [f, g] = [not, id]
          h, i :: Bool -> Bool
          (h, i) = (f, g)
          j, k :: Bool
          (Bar j k) = Bar True (h False)
          l, m :: Bool
          [l, m] = [not True, id False] |]
  ======>
    Promote/TopLevelPatterns.hs:(0,0)-(0,0)
    otherwise :: Bool
    otherwise = True
    id :: forall a. a -> a
    id x = x
    not :: Bool -> Bool
    not True = False
    not False = True
    false_ = False
    f :: Bool -> Bool
    g :: Bool -> Bool
    [f, g] = [not, id]
    h :: Bool -> Bool
    i :: Bool -> Bool
    (h, i) = (f, g)
    j :: Bool
    k :: Bool
    Bar j k = Bar True (h False)
    l :: Bool
    m :: Bool
    [l, m] = [not True, id False]
    type X_0123456789Sym0 = X_0123456789
    type X_0123456789Sym0 = X_0123456789
    type X_0123456789Sym0 = X_0123456789
    type X_0123456789Sym0 = X_0123456789
    type False_Sym0 = False_
    type NotSym1 t = Not t
    data NotSym0 (l :: TyFun Bool Bool)
    type instance Apply NotSym0 l = NotSym1 l
    type IdSym1 t = Id t
    data IdSym0 (l :: TyFun a a)
    type instance Apply IdSym0 l = IdSym1 l
    type family Case_0123456789 t where
      Case_0123456789 ((GHC.Types.:) y ((GHC.Types.:) z GHC.Types.[])) = y
    type FSym0 = F
    type family Case_0123456789 t where
      Case_0123456789 ((GHC.Types.:) z ((GHC.Types.:) y GHC.Types.[])) = y
    type GSym0 = G
    type family Case_0123456789 t where
      Case_0123456789 (GHC.Tuple.(,) y z) = y
    type HSym0 = H
    type family Case_0123456789 t where
      Case_0123456789 (GHC.Tuple.(,) z y) = y
    type ISym0 = I
    type family Case_0123456789 t where
      Case_0123456789 (Bar y z) = y
    type JSym0 = J
    type family Case_0123456789 t where
      Case_0123456789 (Bar z y) = y
    type KSym0 = K
    type family Case_0123456789 t where
      Case_0123456789 ((GHC.Types.:) y ((GHC.Types.:) z GHC.Types.[])) = y
    type LSym0 = L
    type family Case_0123456789 t where
      Case_0123456789 ((GHC.Types.:) z ((GHC.Types.:) y GHC.Types.[])) = y
    type MSym0 = M
    type OtherwiseSym0 = Otherwise
    type X_0123456789 =
        Apply (Apply (:$) NotSym0) (Apply (Apply (:$) IdSym0) GHC.Types.[])
    type X_0123456789 = Apply (Apply Tuple2Sym0 FSym0) GSym0
    type X_0123456789 =
        Apply (Apply BarSym0 TrueSym0) (Apply HSym0 FalseSym0)
    type X_0123456789 =
        Apply (Apply (:$) (Apply NotSym0 TrueSym0)) (Apply (Apply (:$) (Apply IdSym0 FalseSym0)) GHC.Types.[])
    type False_ = FalseSym0
    type family Not (a :: Bool) :: Bool where
      Not True = FalseSym0
      Not False = TrueSym0
    type family Id (a :: a) :: a where
      Id x = x
    type F = (Case_0123456789 X_0123456789Sym0 :: TyFun Bool Bool -> *)
    type G = (Case_0123456789 X_0123456789Sym0 :: TyFun Bool Bool -> *)
    type H = (Case_0123456789 X_0123456789Sym0 :: TyFun Bool Bool -> *)
    type I = (Case_0123456789 X_0123456789Sym0 :: TyFun Bool Bool -> *)
    type J = (Case_0123456789 X_0123456789Sym0 :: Bool)
    type K = (Case_0123456789 X_0123456789Sym0 :: Bool)
    type L = (Case_0123456789 X_0123456789Sym0 :: Bool)
    type M = (Case_0123456789 X_0123456789Sym0 :: Bool)
    type Otherwise = (TrueSym0 :: Bool)
