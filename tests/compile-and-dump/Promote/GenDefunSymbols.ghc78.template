Promote/GenDefunSymbols.hs:0:0: Splicing declarations
    genDefunSymbols [''LiftMaybe, ''NatT, '':+]
  ======>
    Promote/GenDefunSymbols.hs:0:0:
    type LiftMaybeSym2 (t :: TyFun a b -> *) (t :: Maybe a) =
        LiftMaybe t t
    instance SuppressUnusedWarnings LiftMaybeSym1 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) LiftMaybeSym1KindInference GHC.Tuple.())
    data LiftMaybeSym1 (l :: TyFun a b -> *)
                       (l :: TyFun (Maybe a) (Maybe b))
      = forall arg. (GHC.Types.~) (Apply (LiftMaybeSym1 l) arg) (LiftMaybeSym2 l arg) =>
        LiftMaybeSym1KindInference (Data.Proxy.Proxy arg)
    type instance Apply (LiftMaybeSym1 l) l = LiftMaybeSym2 l l
    instance SuppressUnusedWarnings LiftMaybeSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) LiftMaybeSym0KindInference GHC.Tuple.())
    data LiftMaybeSym0 (l :: TyFun (TyFun a b
                                    -> *) (TyFun (Maybe a) (Maybe b) -> *))
      = forall arg. (GHC.Types.~) (Apply LiftMaybeSym0 arg) (LiftMaybeSym1 arg) =>
        LiftMaybeSym0KindInference (Data.Proxy.Proxy arg)
    type instance Apply LiftMaybeSym0 l = LiftMaybeSym1 l
    type ZeroSym0 = Zero
    type SuccSym1 (t :: NatT) = Succ t
    instance SuppressUnusedWarnings SuccSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) SuccSym0KindInference GHC.Tuple.())
    data SuccSym0 (l :: TyFun NatT NatT)
      = forall arg. (GHC.Types.~) (Apply SuccSym0 arg) (SuccSym1 arg) =>
        SuccSym0KindInference (Data.Proxy.Proxy arg)
    type instance Apply SuccSym0 l = SuccSym1 l
    type (:+$$$) (t :: Nat) (t :: Nat) = (:+) t t
    instance SuppressUnusedWarnings (:+$$) where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) (:+$$###) GHC.Tuple.())
    data (:+$$) (l :: Nat) l
      = forall arg. (GHC.Types.~) (Apply ((:+$$) l) arg) ((:+$$$) l arg) =>
        (:+$$###) (Data.Proxy.Proxy arg)
    type instance Apply ((:+$$) l) l = (:+$$$) l l
    instance SuppressUnusedWarnings (:+$) where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) (:+$###) GHC.Tuple.())
    data (:+$) l
      = forall arg. (GHC.Types.~) (Apply (:+$) arg) ((:+$$) arg) =>
        (:+$###) (Data.Proxy.Proxy arg)
    type instance Apply (:+$) l = (:+$$) l
