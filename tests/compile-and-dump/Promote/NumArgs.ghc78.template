INSERT tests/compile-and-dump/Singletons/Nat.ghc78.template
Promote/NumArgs.hs:0:0: Splicing declarations
    promote
      [d| returnFunc :: Nat -> Nat -> Nat
          returnFunc _ = Succ
          id :: a -> a
          id x = x
          idFoo :: c -> a -> a
          idFoo _ = id |]
  ======>
    Promote/NumArgs.hs:(0,0)-(0,0)
    returnFunc :: Nat -> Nat -> Nat
    returnFunc _ = Succ
    id :: forall a. a -> a
    id x = x
    idFoo :: forall c a. c -> a -> a
    idFoo _ = id
    type family ReturnFunc (a :: Nat) :: TyFun Nat Nat -> * where
         ReturnFunc z = SuccSym0
    data ReturnFuncSym0 (k :: TyFun Nat (TyFun Nat Nat -> *))
    type instance (@@) ReturnFuncSym0 a = ReturnFunc a
    type family Id (a :: a) :: a where
      Id x = x
    data IdSym0 (k :: TyFun a a)
    type instance (@@) IdSym0 a = Id a
    type family IdFoo (a :: c) :: TyFun a a -> * where
      IdFoo z = IdSym0
    data IdFooSym0 (k :: TyFun c (TyFun a a -> *))
    type instance (@@) IdFooSym0 a = IdFoo a
