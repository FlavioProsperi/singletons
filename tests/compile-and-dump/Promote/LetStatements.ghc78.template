Promote/LetStatements.hs:0:0: Splicing declarations
    promote
      [d| foo1 :: Nat -> Nat
          foo1 x
            = let
                y :: Nat
                y = Succ Zero
              in y
          foo2 :: Nat
          foo2
            = let
                y = Succ Zero
                z = Succ y
              in z
          foo3 :: Nat -> Nat
          foo3 x
            = let
                y :: Nat
                y = Succ x
              in y
          foo4 :: Nat -> Nat
          foo4 x
            = let
                f :: Nat -> Nat
                f y = Succ y
              in f x
          foo5 :: Nat -> Nat
          foo5 x
            = let
                f :: Nat -> Nat
                f y
                  = let
                      z :: Nat
                      z = Succ y
                    in Succ z
              in f x
          foo6 :: Nat -> Nat
          foo6 x
            = let
                f :: Nat -> Nat
                f y = Succ y in
              let
                z :: Nat
                z = f x
              in z
          foo7 :: Nat -> Nat
          foo7 x
            = let
                x :: Nat
                x = Zero
              in x
          foo8 :: Nat -> Nat
          foo8 x
            = let
                z :: Nat
                z = (\ x -> x) Zero
              in z
          foo9 :: Nat -> Nat
          foo9 x
            = let
                z :: Nat -> Nat
                z = (\ x -> x)
              in z x
          foo10 :: Nat -> Nat
          foo10 x
            = let
                (+) :: Nat -> Nat -> Nat
                Zero + m = m
                (Succ n) + m = Succ (n + m)
              in (Succ Zero) + x
          foo11 :: Nat -> Nat
          foo11 x
            = let
                (+) :: Nat -> Nat -> Nat
                Zero + m = m
                (Succ n) + m = Succ (n + m)
                z :: Nat
                z = x
              in (Succ Zero) + z
          foo12 :: Nat -> Nat
          foo12 x
            = let
                (+) :: Nat -> Nat -> Nat
                Zero + m = m
                (Succ n) + m = Succ (n + x)
              in x + (Succ (Succ Zero))
          foo13 :: forall a. a -> a
          foo13 x
            = let
                bar :: a
                bar = x
              in foo13b bar
          foo13b :: a -> a
          foo13b y = y |]
  ======>
    Promote/LetStatements.hs:(0,0)-(0,0)
    foo1 :: Nat -> Nat
    foo1 x
      = let
          y :: Nat
          y = Succ Zero
        in y
    foo2 :: Nat
    foo2
      = let
          y = Succ Zero
          z = Succ y
        in z
    foo3 :: Nat -> Nat
    foo3 x
      = let
          y :: Nat
          y = Succ x
        in y
    foo4 :: Nat -> Nat
    foo4 x
      = let
          f :: Nat -> Nat
          f y = Succ y
        in f x
    foo5 :: Nat -> Nat
    foo5 x
      = let
          f :: Nat -> Nat
          f y
            = let
                z :: Nat
                z = Succ y
              in Succ z
        in f x
    foo6 :: Nat -> Nat
    foo6 x
      = let
          f :: Nat -> Nat
          f y = Succ y in
        let
          z :: Nat
          z = f x
        in z
    foo7 :: Nat -> Nat
    foo7 x
      = let
          x :: Nat
          x = Zero
        in x
    foo8 :: Nat -> Nat
    foo8 x
      = let
          z :: Nat
          z = \ x -> x Zero
        in z
    foo9 :: Nat -> Nat
    foo9 x
      = let
          z :: Nat -> Nat
          z = \ x -> x
        in z x
    foo10 :: Nat -> Nat
    foo10 x
      = let
          (+) :: Nat -> Nat -> Nat
          (+) Zero m = m
          (+) (Succ n) m = Succ (n + m)
        in ((Succ Zero) + x)
    foo11 :: Nat -> Nat
    foo11 x
      = let
          (+) :: Nat -> Nat -> Nat
          z :: Nat
          (+) Zero m = m
          (+) (Succ n) m = Succ (n + m)
          z = x
        in ((Succ Zero) + z)
    foo12 :: Nat -> Nat
    foo12 x
      = let
          (+) :: Nat -> Nat -> Nat
          (+) Zero m = m
          (+) (Succ n) m = Succ (n + x)
        in (x + (Succ (Succ Zero)))
    foo13 :: forall a. a -> a
    foo13 x
      = let
          bar :: a
          bar = x
        in foo13b bar
    foo13b :: forall a. a -> a
    foo13b y = y
    type Foo13bSym1 t = Foo13b t
    data Foo13bSym0 (l :: TyFun a a)
    type instance Apply Foo13bSym0 l = Foo13bSym1 l
    type Foo13Sym1 t = Foo13 t
    data Foo13Sym0 (l :: TyFun a a)
    type instance Apply Foo13Sym0 l = Foo13Sym1 l
    type Let_0123456789BarSym1 t = Let_0123456789Bar t
    data Let_0123456789BarSym0 (l :: TyFun k a)
    type instance Apply Let_0123456789BarSym0 l = Let_0123456789BarSym1 l
    type Let_0123456789Bar x = (x :: a)
    type Foo12Sym1 t = Foo12 t
    data Foo12Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo12Sym0 l = Foo12Sym1 l
    type Let_0123456789:+Sym3 t t t = Let_0123456789:+ t t t
    data Let_0123456789:+Sym2 (l :: k) (l :: Nat) (l :: TyFun Nat Nat)
    type instance Apply (Let_0123456789:+Sym2 l l) l = Let_0123456789:+Sym3 l l l
    data Let_0123456789:+Sym1 (l :: k)
                              (l :: TyFun Nat (TyFun Nat Nat -> *))
    type instance Apply (Let_0123456789:+Sym1 l) l = Let_0123456789:+Sym2 l l
    data Let_0123456789:+Sym0 (l :: TyFun k (TyFun Nat (TyFun Nat Nat
                                                        -> *)
                                             -> *))
    type instance Apply Let_0123456789:+Sym0 l = Let_0123456789:+Sym1 l
    type family Let_0123456789:+ x (a :: Nat) (a :: Nat) :: Nat where
      Let_0123456789:+ x Zero m = m
      Let_0123456789:+ x (Succ n) m = Apply SuccSym0 (Apply (Apply (Let_0123456789:+Sym1 x) n) x)
    type Foo11Sym1 t = Foo11 t
    data Foo11Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo11Sym0 l = Foo11Sym1 l
    type Let_0123456789ZSym1 t = Let_0123456789Z t
    data Let_0123456789ZSym0 (l :: TyFun k Nat)
    type instance Apply Let_0123456789ZSym0 l = Let_0123456789ZSym1 l
    type Let_0123456789:+Sym3 t t t = Let_0123456789:+ t t t
    data Let_0123456789:+Sym2 (l :: k) (l :: Nat) (l :: TyFun Nat Nat)
    type instance Apply (Let_0123456789:+Sym2 l l) l = Let_0123456789:+Sym3 l l l
    data Let_0123456789:+Sym1 (l :: k)
                              (l :: TyFun Nat (TyFun Nat Nat -> *))
    type instance Apply (Let_0123456789:+Sym1 l) l = Let_0123456789:+Sym2 l l
    data Let_0123456789:+Sym0 (l :: TyFun k (TyFun Nat (TyFun Nat Nat
                                                        -> *)
                                             -> *))
    type instance Apply Let_0123456789:+Sym0 l = Let_0123456789:+Sym1 l
    type Let_0123456789Z x = (x :: Nat)
    type family Let_0123456789:+ x (a :: Nat) (a :: Nat) :: Nat where
      Let_0123456789:+ x Zero m = m
      Let_0123456789:+ x (Succ n) m = Apply SuccSym0 (Apply (Apply (Let_0123456789:+Sym1 x) n) m)
    type Foo10Sym1 t = Foo10 t
    data Foo10Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo10Sym0 l = Foo10Sym1 l
    type Let_0123456789:+Sym3 t t t = Let_0123456789:+ t t t
    data Let_0123456789:+Sym2 (l :: k) (l :: Nat) (l :: TyFun Nat Nat)
    type instance Apply (Let_0123456789:+Sym2 l l) l = Let_0123456789:+Sym3 l l l
    data Let_0123456789:+Sym1 (l :: k)
                              (l :: TyFun Nat (TyFun Nat Nat -> *))
    type instance Apply (Let_0123456789:+Sym1 l) l = Let_0123456789:+Sym2 l l
    data Let_0123456789:+Sym0 (l :: TyFun k (TyFun Nat (TyFun Nat Nat
                                                        -> *)
                                             -> *))
    type instance Apply Let_0123456789:+Sym0 l = Let_0123456789:+Sym1 l
    type family Let_0123456789:+ x (a :: Nat) (a :: Nat) :: Nat where
      Let_0123456789:+ x Zero m = m
      Let_0123456789:+ x (Succ n) m = Apply SuccSym0 (Apply (Apply (Let_0123456789:+Sym1 x) n) m)
    type Foo9Sym1 t = Foo9 t
    data Foo9Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo9Sym0 l = Foo9Sym1 l
    type family Lambda_0123456789 x t where
      Lambda_0123456789 x x = x
    type Lambda_0123456789Sym2 t t = Lambda_0123456789 t t
    data Lambda_0123456789Sym1 (l :: k) (l :: TyFun k r)
    type instance Apply (Lambda_0123456789Sym1 l) l = Lambda_0123456789Sym2 l l
    data Lambda_0123456789Sym0 (l :: TyFun k (TyFun k r -> *))
    type instance Apply Lambda_0123456789Sym0 l = Lambda_0123456789Sym1 l
    type Let_0123456789ZSym1 t = Let_0123456789Z t
    data Let_0123456789ZSym0 (l :: TyFun k (TyFun Nat Nat -> *))
    type instance Apply Let_0123456789ZSym0 l = Let_0123456789ZSym1 l
    type Let_0123456789Z x =
        (Apply Lambda_0123456789Sym0 x :: TyFun Nat Nat -> *)
    type Foo8Sym1 t = Foo8 t
    data Foo8Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo8Sym0 l = Foo8Sym1 l
    type family Lambda_0123456789 x t where
      Lambda_0123456789 x x = x
    type Lambda_0123456789Sym2 t t = Lambda_0123456789 t t
    data Lambda_0123456789Sym1 (l :: k) (l :: TyFun k r)
    type instance Apply (Lambda_0123456789Sym1 l) l = Lambda_0123456789Sym2 l l
    data Lambda_0123456789Sym0 (l :: TyFun k (TyFun k r -> *))
    type instance Apply Lambda_0123456789Sym0 l = Lambda_0123456789Sym1 l
    type Let_0123456789ZSym1 t = Let_0123456789Z t
    data Let_0123456789ZSym0 (l :: TyFun k Nat)
    type instance Apply Let_0123456789ZSym0 l = Let_0123456789ZSym1 l
    type Let_0123456789Z x =
        (Apply (Apply Lambda_0123456789Sym0 x) ZeroSym0 :: Nat)
    type Foo7Sym1 t = Foo7 t
    data Foo7Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo7Sym0 l = Foo7Sym1 l
    type Let_0123456789XSym1 t = Let_0123456789X t
    data Let_0123456789XSym0 (l :: TyFun k Nat)
    type instance Apply Let_0123456789XSym0 l = Let_0123456789XSym1 l
    type Let_0123456789X x = (ZeroSym0 :: Nat)
    type Foo6Sym1 t = Foo6 t
    data Foo6Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo6Sym0 l = Foo6Sym1 l
    type Let_0123456789FSym2 t t = Let_0123456789F t t
    data Let_0123456789FSym1 (l :: k) (l :: TyFun Nat Nat)
    type instance Apply (Let_0123456789FSym1 l) l = Let_0123456789FSym2 l l
    data Let_0123456789FSym0 (l :: TyFun k (TyFun Nat Nat -> *))
    type instance Apply Let_0123456789FSym0 l = Let_0123456789FSym1 l
    type family Let_0123456789F x (a :: Nat) :: Nat where
      Let_0123456789F x y = Apply SuccSym0 y
    type Let_0123456789ZSym1 t = Let_0123456789Z t
    data Let_0123456789ZSym0 (l :: TyFun k Nat)
    type instance Apply Let_0123456789ZSym0 l = Let_0123456789ZSym1 l
    type Let_0123456789Z x = (Apply (Let_0123456789FSym1 x) x :: Nat)
    type Foo5Sym1 t = Foo5 t
    data Foo5Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo5Sym0 l = Foo5Sym1 l
    type Let_0123456789FSym2 t t = Let_0123456789F t t
    data Let_0123456789FSym1 (l :: k) (l :: TyFun Nat Nat)
    type instance Apply (Let_0123456789FSym1 l) l = Let_0123456789FSym2 l l
    data Let_0123456789FSym0 (l :: TyFun k (TyFun Nat Nat -> *))
    type instance Apply Let_0123456789FSym0 l = Let_0123456789FSym1 l
    type Let_0123456789ZSym2 t t = Let_0123456789Z t t
    data Let_0123456789ZSym1 (l :: k) (l :: TyFun k Nat)
    type instance Apply (Let_0123456789ZSym1 l) l = Let_0123456789ZSym2 l l
    data Let_0123456789ZSym0 (l :: TyFun k (TyFun k Nat -> *))
    type instance Apply Let_0123456789ZSym0 l = Let_0123456789ZSym1 l
    type Let_0123456789Z x y = (Apply SuccSym0 y :: Nat)
    type family Let_0123456789F x (a :: Nat) :: Nat where
      Let_0123456789F x y = Apply SuccSym0 (Let_0123456789ZSym2 x y)
    type Foo4Sym1 t = Foo4 t
    data Foo4Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo4Sym0 l = Foo4Sym1 l
    type Let_0123456789FSym2 t t = Let_0123456789F t t
    data Let_0123456789FSym1 (l :: k) (l :: TyFun Nat Nat)
    type instance Apply (Let_0123456789FSym1 l) l = Let_0123456789FSym2 l l
    data Let_0123456789FSym0 (l :: TyFun k (TyFun Nat Nat -> *))
    type instance Apply Let_0123456789FSym0 l = Let_0123456789FSym1 l
    type family Let_0123456789F x (a :: Nat) :: Nat where
      Let_0123456789F x y = Apply SuccSym0 y
    type Foo3Sym1 t = Foo3 t
    data Foo3Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo3Sym0 l = Foo3Sym1 l
    type Let_0123456789YSym1 t = Let_0123456789Y t
    data Let_0123456789YSym0 (l :: TyFun k Nat)
    type instance Apply Let_0123456789YSym0 l = Let_0123456789YSym1 l
    type Let_0123456789Y x = (Apply SuccSym0 x :: Nat)
    type Let_0123456789YSym0 = Let_0123456789Y
    type Let_0123456789ZSym0 = Let_0123456789Z
    type Let_0123456789Y = Apply SuccSym0 ZeroSym0
    type Let_0123456789Z = Apply SuccSym0 Let_0123456789YSym0
    type Foo2Sym0 = Foo2
    type Foo1Sym1 t = Foo1 t
    data Foo1Sym0 (l :: TyFun Nat Nat)
    type instance Apply Foo1Sym0 l = Foo1Sym1 l
    type Let_0123456789YSym1 t = Let_0123456789Y t
    data Let_0123456789YSym0 (l :: TyFun k Nat)
    type instance Apply Let_0123456789YSym0 l = Let_0123456789YSym1 l
    type Let_0123456789Y x = (Apply SuccSym0 ZeroSym0 :: Nat)
    type family Foo13b (a :: a) :: a where
      Foo13b y = y
    type family Foo13 (a :: a) :: a where
      Foo13 x = Apply Foo13bSym0 (Let_0123456789BarSym1 x)
    type family Foo12 (a :: Nat) :: Nat where
      Foo12 x = Apply (Apply (Let_0123456789:+Sym1 x) x) (Apply SuccSym0 (Apply SuccSym0 ZeroSym0))
    type family Foo11 (a :: Nat) :: Nat where
      Foo11 x = Apply (Apply (Let_0123456789:+Sym1 x) (Apply SuccSym0 ZeroSym0)) (Let_0123456789ZSym1 x)
    type family Foo10 (a :: Nat) :: Nat where
      Foo10 x = Apply (Apply (Let_0123456789:+Sym1 x) (Apply SuccSym0 ZeroSym0)) x
    type family Foo9 (a :: Nat) :: Nat where
      Foo9 x = Apply (Let_0123456789ZSym1 x) x
    type family Foo8 (a :: Nat) :: Nat where
      Foo8 x = Let_0123456789ZSym1 x
    type family Foo7 (a :: Nat) :: Nat where
      Foo7 x = Let_0123456789XSym1 x
    type family Foo6 (a :: Nat) :: Nat where
      Foo6 x = Let_0123456789ZSym1 x
    type family Foo5 (a :: Nat) :: Nat where
      Foo5 x = Apply (Let_0123456789FSym1 x) x
    type family Foo4 (a :: Nat) :: Nat where
      Foo4 x = Apply (Let_0123456789FSym1 x) x
    type family Foo3 (a :: Nat) :: Nat where
      Foo3 x = Let_0123456789YSym1 x
    type Foo2 = (Let_0123456789ZSym0 :: Nat)
    type family Foo1 (a :: Nat) :: Nat where
      Foo1 x = Let_0123456789YSym1 x
