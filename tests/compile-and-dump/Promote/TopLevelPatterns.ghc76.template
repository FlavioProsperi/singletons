Promote/TopLevelPatterns.hs:0:0: Splicing declarations
    promote
      [d| otherwise :: Bool
          otherwise = True
          f, g :: Bool
          [f, g] = [otherwise, otherwise]

          data Bool = False | True |]
  ======>
    Promote/TopLevelPatterns.hs:(0,0)-(0,0)
    data Bool = False | True
    otherwise :: Bool
    otherwise = True
    f :: Bool
    g :: Bool
    [f, g] = [otherwise, otherwise]
    type FalseSym0 = False
    type TrueSym0 = True
    type Otherwise = TrueSym0
    type OtherwiseSym0 = TrueSym0
    type F = Head '[OtherwiseSym0, OtherwiseSym0]
    type FSym0 = Head '[OtherwiseSym0, OtherwiseSym0]
    type G = Head (Tail '[OtherwiseSym0, OtherwiseSym0])
    type GSym0 = Head (Tail '[OtherwiseSym0, OtherwiseSym0])
