Promote/BoundedDeriving.hs:0:0: Splicing declarations
    promote
      [d| data Foo1
            = Foo1
            deriving (Bounded)
          data Foo2
            = A | B | C | D | E
            deriving (Bounded)
          data Foo3 a
            = Foo3 a
            deriving (Bounded) |]
  ======>
    Promote/BoundedDeriving.hs:(0,0)-(0,0)
    data Foo1
      = Foo1
      deriving (Bounded)
    data Foo2
      = A | B | C | D | E
      deriving (Bounded)
    data Foo3 a
      = Foo3 a
      deriving (Bounded)
    instance PBounded (KProxy :: KProxy Foo1) where
      type MinBound = Foo1
      type MaxBound = Foo1
    type Foo1Sym0 = Foo1
    instance PBounded (KProxy :: KProxy Foo2) where
      type MinBound = A
      type MaxBound = E
    type ASym0 = A
    type BSym0 = B
    type CSym0 = C
    type DSym0 = D
    type ESym0 = E
    instance PBounded (KProxy :: KProxy (Foo3 k)) where
      type MinBound = Foo3 MinBound
      type MaxBound = Foo3 MaxBound
    type Foo3Sym1 (t :: a) = Foo3 t
    instance SuppressUnusedWarnings Foo3Sym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) Foo3Sym0KindInference GHC.Tuple.())
    data Foo3Sym0 (l :: TyFun a (Foo3 a))
      = forall arg. (GHC.Types.~) (Data.Singletons.KindOf (Apply Foo3Sym0 arg)) (Data.Singletons.KindOf (Foo3Sym1 arg)) =>
        Foo3Sym0KindInference
    type instance Apply Foo3Sym0 l = Foo3Sym1 l
