Promote/Classes.hs:0:0: Splicing declarations
    promote
      [d| const :: a -> b -> a
          const x _ = x
          
          class Ord a where
            compare :: a -> a -> Ordering
          
          instance Ord () where
            compare _ = const EQ
          instance Ord Nat where
            Zero `compare` Zero = EQ
            Zero `compare` (Succ _) = LT
            (Succ _) `compare` Zero = GT
            (Succ n) `compare` (Succ m) = m `compare` n |]
  ======>
    Promote/Classes.hs:(0,0)-(0,0)
    const :: forall a b. a -> b -> a
    const x _ = x
    class Ord a where
      compare :: a -> a -> Ordering
    instance Ord Nat where
      compare Zero Zero = EQ
      compare Zero (Succ _) = LT
      compare (Succ _) Zero = GT
      compare (Succ n) (Succ m) = (m `compare` n)
    instance Ord () where
      compare _ = const EQ
    type ConstSym2 (t :: a) (t :: b) = Const t t
    instance SuppressUnusedWarnings ConstSym1 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) ConstSym1KindInference GHC.Tuple.())
    data ConstSym1 (l :: a) (l :: TyFun b a)
      = forall arg. (GHC.Types.~) (Apply (ConstSym1 l) arg) (ConstSym2 l arg) =>
        ConstSym1KindInference (Proxy arg)
    type instance Apply (ConstSym1 l) l = ConstSym2 l l
    instance SuppressUnusedWarnings ConstSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) ConstSym0KindInference GHC.Tuple.())
    data ConstSym0 (l :: TyFun a (TyFun b a -> *))
      = forall arg. (GHC.Types.~) (Apply ConstSym0 arg) (ConstSym1 arg) =>
        ConstSym0KindInference (Proxy arg)
    type instance Apply ConstSym0 l = ConstSym1 l
    type family Const (a :: a) (a :: b) :: a where
      Const x z = x
    class OrdTyVars a
    instance SuppressUnusedWarnings OrdTyVars where
      suppressUnusedWarnings _ = GHC.Tuple.()
    type CompareSym2 (t :: a) (t :: a) = Compare t t
    instance SuppressUnusedWarnings CompareSym1 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) CompareSym1KindInference GHC.Tuple.())
    data CompareSym1 (l :: a) (l :: TyFun a Ordering)
      = forall arg. (GHC.Types.~) (Apply (CompareSym1 l) arg) (CompareSym2 l arg) =>
        CompareSym1KindInference (Proxy arg)
    type instance Apply (CompareSym1 l) l = CompareSym2 l l
    instance SuppressUnusedWarnings CompareSym0 where
      suppressUnusedWarnings _
        = snd (GHC.Tuple.(,) CompareSym0KindInference GHC.Tuple.())
    data CompareSym0 (l :: TyFun a (TyFun a Ordering -> *))
      = forall arg. (GHC.Types.~) (Apply CompareSym0 arg) (CompareSym1 arg) =>
        CompareSym0KindInference (Proxy arg)
    type instance Apply CompareSym0 l = CompareSym1 l
    type family Compare (arg :: a) (arg :: a) :: Ordering
    type instance Compare (Zero :: Nat) (Zero :: Nat) = (EQSym0 :: Ordering)
    type instance Compare (Zero :: Nat) (Succ z :: Nat) = (LTSym0 :: Ordering)
    type instance Compare (Succ z :: Nat) (Zero :: Nat) = (GTSym0 :: Ordering)
    type instance Compare (Succ n :: Nat) (Succ m :: Nat) = (Apply (Apply CompareSym0 m) n :: Ordering)
    type instance Compare (z :: GHC.Tuple.()) (eta_arg :: GHC.Tuple.()) = (Apply (Apply ConstSym0 EQSym0) eta_arg :: Ordering)
